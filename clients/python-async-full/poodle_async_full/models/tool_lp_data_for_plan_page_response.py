# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from poodle_async_full.models.core_competency_list_user_plans_response_inner import CoreCompetencyListUserPlansResponseInner
from poodle_async_full.models.tool_lp_data_for_plan_page_response_competencies_inner import ToolLpDataForPlanPageResponseCompetenciesInner
from typing import Optional, Set
from typing_extensions import Self

class ToolLpDataForPlanPageResponse(BaseModel):
    """
    ToolLpDataForPlanPageResponse
    """ # noqa: E501
    competencies: List[ToolLpDataForPlanPageResponseCompetenciesInner]
    competencycount: Optional[StrictInt] = Field(description="Count of competencies")
    contextid: Optional[StrictInt] = Field(description="Context ID.")
    plan: CoreCompetencyListUserPlansResponseInner
    pluginbaseurl: Optional[StrictStr] = Field(description="Plugin base URL.")
    proficientcompetencycount: Optional[StrictInt] = Field(description="Count of proficientcompetencies")
    proficientcompetencypercentage: Optional[Union[StrictFloat, StrictInt]] = Field(description="Percentage of competencies proficient")
    proficientcompetencypercentageformatted: Optional[StrictStr] = Field(description="Displayable percentage")
    __properties: ClassVar[List[str]] = ["competencies", "competencycount", "contextid", "plan", "pluginbaseurl", "proficientcompetencycount", "proficientcompetencypercentage", "proficientcompetencypercentageformatted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolLpDataForPlanPageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in competencies (list)
        _items = []
        if self.competencies:
            for _item_competencies in self.competencies:
                if _item_competencies:
                    _items.append(_item_competencies.to_dict())
            _dict['competencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # set to None if competencycount (nullable) is None
        # and model_fields_set contains the field
        if self.competencycount is None and "competencycount" in self.model_fields_set:
            _dict['competencycount'] = None

        # set to None if contextid (nullable) is None
        # and model_fields_set contains the field
        if self.contextid is None and "contextid" in self.model_fields_set:
            _dict['contextid'] = None

        # set to None if pluginbaseurl (nullable) is None
        # and model_fields_set contains the field
        if self.pluginbaseurl is None and "pluginbaseurl" in self.model_fields_set:
            _dict['pluginbaseurl'] = None

        # set to None if proficientcompetencycount (nullable) is None
        # and model_fields_set contains the field
        if self.proficientcompetencycount is None and "proficientcompetencycount" in self.model_fields_set:
            _dict['proficientcompetencycount'] = None

        # set to None if proficientcompetencypercentage (nullable) is None
        # and model_fields_set contains the field
        if self.proficientcompetencypercentage is None and "proficientcompetencypercentage" in self.model_fields_set:
            _dict['proficientcompetencypercentage'] = None

        # set to None if proficientcompetencypercentageformatted (nullable) is None
        # and model_fields_set contains the field
        if self.proficientcompetencypercentageformatted is None and "proficientcompetencypercentageformatted" in self.model_fields_set:
            _dict['proficientcompetencypercentageformatted'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolLpDataForPlanPageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "competencies": [ToolLpDataForPlanPageResponseCompetenciesInner.from_dict(_item) for _item in obj["competencies"]] if obj.get("competencies") is not None else None,
            "competencycount": obj.get("competencycount"),
            "contextid": obj.get("contextid"),
            "plan": CoreCompetencyListUserPlansResponseInner.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "pluginbaseurl": obj.get("pluginbaseurl"),
            "proficientcompetencycount": obj.get("proficientcompetencycount"),
            "proficientcompetencypercentage": obj.get("proficientcompetencypercentage"),
            "proficientcompetencypercentageformatted": obj.get("proficientcompetencypercentageformatted")
        })
        return _obj


