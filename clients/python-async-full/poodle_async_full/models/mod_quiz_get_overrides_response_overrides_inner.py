# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModQuizGetOverridesResponseOverridesInner(BaseModel):
    """
    ModQuizGetOverridesResponseOverridesInner
    """ # noqa: E501
    attempts: Optional[StrictInt] = Field(default=None, description="Override attempts value")
    groupid: Optional[StrictInt] = Field(default=None, description="Group ID")
    id: Optional[StrictInt] = Field(description="Override ID")
    password: Optional[StrictStr] = Field(default=None, description="Override password")
    quiz: Optional[StrictInt] = Field(description="Quiz ID")
    timeclose: Optional[StrictInt] = Field(default=None, description="Override time close value")
    timelimit: Optional[StrictInt] = Field(default=None, description="Override time limit value")
    timeopen: Optional[StrictInt] = Field(default=None, description="Override time open value")
    userid: Optional[StrictInt] = Field(default=None, description="User ID")
    __properties: ClassVar[List[str]] = ["attempts", "groupid", "id", "password", "quiz", "timeclose", "timelimit", "timeopen", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModQuizGetOverridesResponseOverridesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if attempts (nullable) is None
        # and model_fields_set contains the field
        if self.attempts is None and "attempts" in self.model_fields_set:
            _dict['attempts'] = None

        # set to None if groupid (nullable) is None
        # and model_fields_set contains the field
        if self.groupid is None and "groupid" in self.model_fields_set:
            _dict['groupid'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if quiz (nullable) is None
        # and model_fields_set contains the field
        if self.quiz is None and "quiz" in self.model_fields_set:
            _dict['quiz'] = None

        # set to None if timeclose (nullable) is None
        # and model_fields_set contains the field
        if self.timeclose is None and "timeclose" in self.model_fields_set:
            _dict['timeclose'] = None

        # set to None if timelimit (nullable) is None
        # and model_fields_set contains the field
        if self.timelimit is None and "timelimit" in self.model_fields_set:
            _dict['timelimit'] = None

        # set to None if timeopen (nullable) is None
        # and model_fields_set contains the field
        if self.timeopen is None and "timeopen" in self.model_fields_set:
            _dict['timeopen'] = None

        # set to None if userid (nullable) is None
        # and model_fields_set contains the field
        if self.userid is None and "userid" in self.model_fields_set:
            _dict['userid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModQuizGetOverridesResponseOverridesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attempts": obj.get("attempts"),
            "groupid": obj.get("groupid"),
            "id": obj.get("id"),
            "password": obj.get("password"),
            "quiz": obj.get("quiz"),
            "timeclose": obj.get("timeclose"),
            "timelimit": obj.get("timelimit"),
            "timeopen": obj.get("timeopen"),
            "userid": obj.get("userid")
        })
        return _obj


