# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ModForumSetPinStateResponseCapabilities(BaseModel):
    """
    ModForumSetPinStateResponseCapabilities
    """ # noqa: E501
    favourite: StrictBool = Field(description="favourite")
    manage: StrictBool = Field(description="manage")
    move: StrictBool = Field(description="move")
    pin: StrictBool = Field(description="pin")
    post: StrictBool = Field(description="post")
    subscribe: StrictBool = Field(description="subscribe")
    __properties: ClassVar[List[str]] = ["favourite", "manage", "move", "pin", "post", "subscribe"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModForumSetPinStateResponseCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModForumSetPinStateResponseCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "favourite": obj.get("favourite") if obj.get("favourite") is not None else False,
            "manage": obj.get("manage") if obj.get("manage") is not None else False,
            "move": obj.get("move") if obj.get("move") is not None else False,
            "pin": obj.get("pin") if obj.get("pin") is not None else False,
            "post": obj.get("post") if obj.get("post") is not None else False,
            "subscribe": obj.get("subscribe") if obj.get("subscribe") is not None else False
        })
        return _obj


