# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreCourseDuplicateCourseParametersOptionsInner(BaseModel):
    """
    CoreCourseDuplicateCourseParametersOptionsInner
    """ # noqa: E501
    name: Optional[StrictStr] = Field(description="The backup option name:                                             \"activities\" (int) Include course activites (default to 1 that is equal to yes),                                             \"blocks\" (int) Include course blocks (default to 1 that is equal to yes),                                             \"filters\" (int) Include course filters  (default to 1 that is equal to yes),                                             \"users\" (int) Include users (default to 0 that is equal to no),                                             \"enrolments\" (int) Include enrolment methods (default to 1 - restore only with users),                                             \"role_assignments\" (int) Include role assignments  (default to 0 that is equal to no),                                             \"comments\" (int) Include user comments  (default to 0 that is equal to no),                                             \"userscompletion\" (int) Include user course completion information  (default to 0 that is equal to no),                                             \"logs\" (int) Include course logs  (default to 0 that is equal to no),                                             \"grade_histories\" (int) Include histories  (default to 0 that is equal to no)")
    value: Optional[StrictStr] = Field(description="the value for the option 1 (yes) or 0 (no)")
    __properties: ClassVar[List[str]] = ["name", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCourseDuplicateCourseParametersOptionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCourseDuplicateCourseParametersOptionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "value": obj.get("value")
        })
        return _obj


