# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModBigbluebuttonbnGetRecordingsResponseTabledataColumnsInner(BaseModel):
    """
    ModBigbluebuttonbnGetRecordingsResponseTabledataColumnsInner
    """ # noqa: E501
    allow_html: Optional[StrictBool] = Field(default=False, description="Whether this column contains HTML", alias="allowHTML")
    formatter: Optional[StrictStr] = Field(default=None, description="Formatter name")
    key: Optional[StrictStr]
    label: Optional[StrictStr]
    sortable: Optional[StrictBool] = Field(default=False, description="Whether this column is sortable")
    type: Optional[StrictStr] = Field(default=None, description="Column type")
    width: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["allowHTML", "formatter", "key", "label", "sortable", "type", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModBigbluebuttonbnGetRecordingsResponseTabledataColumnsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if allow_html (nullable) is None
        # and model_fields_set contains the field
        if self.allow_html is None and "allow_html" in self.model_fields_set:
            _dict['allowHTML'] = None

        # set to None if formatter (nullable) is None
        # and model_fields_set contains the field
        if self.formatter is None and "formatter" in self.model_fields_set:
            _dict['formatter'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['key'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if sortable (nullable) is None
        # and model_fields_set contains the field
        if self.sortable is None and "sortable" in self.model_fields_set:
            _dict['sortable'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['width'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModBigbluebuttonbnGetRecordingsResponseTabledataColumnsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowHTML": obj.get("allowHTML") if obj.get("allowHTML") is not None else False,
            "formatter": obj.get("formatter"),
            "key": obj.get("key"),
            "label": obj.get("label"),
            "sortable": obj.get("sortable") if obj.get("sortable") is not None else False,
            "type": obj.get("type"),
            "width": obj.get("width")
        })
        return _obj


