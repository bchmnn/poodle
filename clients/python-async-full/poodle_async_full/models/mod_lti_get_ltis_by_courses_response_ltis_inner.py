# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_block_get_course_blocks_response_blocks_inner_contents_files_inner import CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner
from typing import Optional, Set
from typing_extensions import Self

class ModLtiGetLtisByCoursesResponseLtisInner(BaseModel):
    """
    Tool
    """ # noqa: E501
    course: Optional[StrictInt] = Field(description="Course id")
    coursemodule: Optional[StrictInt] = Field(description="Course module id")
    debuglaunch: Optional[StrictInt] = Field(default=None, description="Debug launch")
    grade: Optional[StrictInt] = Field(default=None, description="Enable grades")
    groupingid: Optional[StrictInt] = Field(default=None, description="Group id")
    groupmode: Optional[StrictInt] = Field(default=None, description="Group mode")
    icon: Optional[StrictStr] = Field(default=None, description="Alternative icon URL")
    id: Optional[StrictInt] = Field(description="Activity instance id")
    instructorchoiceacceptgrades: Optional[StrictInt] = Field(default=None, description="instructor choice accept grades")
    instructorchoiceallowroster: Optional[StrictInt] = Field(default=None, description="Instructor choice allow roster")
    instructorchoiceallowsetting: Optional[StrictInt] = Field(default=None, description="Instructor choice allow setting")
    instructorchoicesendemailaddr: Optional[StrictInt] = Field(default=None, description="instructor choice send mail address")
    instructorchoicesendname: Optional[StrictStr] = Field(default=None, description="Instructor choice send name")
    instructorcustomparameters: Optional[StrictStr] = Field(default=None, description="instructor custom parameters")
    intro: Optional[StrictStr] = Field(default=None, description="Activity introduction")
    introfiles: Optional[List[CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner]] = Field(default=None, description="Files in the introduction")
    introformat: Optional[StrictInt] = Field(default=None, description="intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    lang: Optional[StrictStr] = Field(default=None, description="Forced activity language")
    launchcontainer: Optional[StrictInt] = Field(default=None, description="Launch container mode")
    name: Optional[StrictStr] = Field(description="Activity name")
    password: Optional[StrictStr] = Field(default=None, description="Shared secret")
    resourcekey: Optional[StrictStr] = Field(default=None, description="Resource key")
    section: Optional[StrictInt] = Field(default=None, description="Course section id")
    secureicon: Optional[StrictStr] = Field(default=None, description="Secure icon URL")
    securetoolurl: Optional[StrictStr] = Field(default=None, description="Secure tool url")
    servicesalt: Optional[StrictStr] = Field(default=None, description="Service salt")
    showdescriptionlaunch: Optional[StrictInt] = Field(default=None, description="Show description launch")
    showtitlelaunch: Optional[StrictInt] = Field(default=None, description="Show title launch")
    timecreated: Optional[StrictInt] = Field(default=None, description="Time of creation")
    timemodified: Optional[StrictInt] = Field(default=None, description="Time of last modification")
    toolurl: Optional[StrictStr] = Field(default=None, description="Tool url")
    typeid: Optional[StrictInt] = Field(default=None, description="Type id")
    visible: Optional[StrictBool] = Field(default=None, description="Visible")
    __properties: ClassVar[List[str]] = ["course", "coursemodule", "debuglaunch", "grade", "groupingid", "groupmode", "icon", "id", "instructorchoiceacceptgrades", "instructorchoiceallowroster", "instructorchoiceallowsetting", "instructorchoicesendemailaddr", "instructorchoicesendname", "instructorcustomparameters", "intro", "introfiles", "introformat", "lang", "launchcontainer", "name", "password", "resourcekey", "section", "secureicon", "securetoolurl", "servicesalt", "showdescriptionlaunch", "showtitlelaunch", "timecreated", "timemodified", "toolurl", "typeid", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModLtiGetLtisByCoursesResponseLtisInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in introfiles (list)
        _items = []
        if self.introfiles:
            for _item_introfiles in self.introfiles:
                if _item_introfiles:
                    _items.append(_item_introfiles.to_dict())
            _dict['introfiles'] = _items
        # set to None if course (nullable) is None
        # and model_fields_set contains the field
        if self.course is None and "course" in self.model_fields_set:
            _dict['course'] = None

        # set to None if coursemodule (nullable) is None
        # and model_fields_set contains the field
        if self.coursemodule is None and "coursemodule" in self.model_fields_set:
            _dict['coursemodule'] = None

        # set to None if debuglaunch (nullable) is None
        # and model_fields_set contains the field
        if self.debuglaunch is None and "debuglaunch" in self.model_fields_set:
            _dict['debuglaunch'] = None

        # set to None if grade (nullable) is None
        # and model_fields_set contains the field
        if self.grade is None and "grade" in self.model_fields_set:
            _dict['grade'] = None

        # set to None if groupingid (nullable) is None
        # and model_fields_set contains the field
        if self.groupingid is None and "groupingid" in self.model_fields_set:
            _dict['groupingid'] = None

        # set to None if groupmode (nullable) is None
        # and model_fields_set contains the field
        if self.groupmode is None and "groupmode" in self.model_fields_set:
            _dict['groupmode'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if instructorchoiceacceptgrades (nullable) is None
        # and model_fields_set contains the field
        if self.instructorchoiceacceptgrades is None and "instructorchoiceacceptgrades" in self.model_fields_set:
            _dict['instructorchoiceacceptgrades'] = None

        # set to None if instructorchoiceallowroster (nullable) is None
        # and model_fields_set contains the field
        if self.instructorchoiceallowroster is None and "instructorchoiceallowroster" in self.model_fields_set:
            _dict['instructorchoiceallowroster'] = None

        # set to None if instructorchoiceallowsetting (nullable) is None
        # and model_fields_set contains the field
        if self.instructorchoiceallowsetting is None and "instructorchoiceallowsetting" in self.model_fields_set:
            _dict['instructorchoiceallowsetting'] = None

        # set to None if instructorchoicesendemailaddr (nullable) is None
        # and model_fields_set contains the field
        if self.instructorchoicesendemailaddr is None and "instructorchoicesendemailaddr" in self.model_fields_set:
            _dict['instructorchoicesendemailaddr'] = None

        # set to None if instructorchoicesendname (nullable) is None
        # and model_fields_set contains the field
        if self.instructorchoicesendname is None and "instructorchoicesendname" in self.model_fields_set:
            _dict['instructorchoicesendname'] = None

        # set to None if instructorcustomparameters (nullable) is None
        # and model_fields_set contains the field
        if self.instructorcustomparameters is None and "instructorcustomparameters" in self.model_fields_set:
            _dict['instructorcustomparameters'] = None

        # set to None if intro (nullable) is None
        # and model_fields_set contains the field
        if self.intro is None and "intro" in self.model_fields_set:
            _dict['intro'] = None

        # set to None if introformat (nullable) is None
        # and model_fields_set contains the field
        if self.introformat is None and "introformat" in self.model_fields_set:
            _dict['introformat'] = None

        # set to None if lang (nullable) is None
        # and model_fields_set contains the field
        if self.lang is None and "lang" in self.model_fields_set:
            _dict['lang'] = None

        # set to None if launchcontainer (nullable) is None
        # and model_fields_set contains the field
        if self.launchcontainer is None and "launchcontainer" in self.model_fields_set:
            _dict['launchcontainer'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if resourcekey (nullable) is None
        # and model_fields_set contains the field
        if self.resourcekey is None and "resourcekey" in self.model_fields_set:
            _dict['resourcekey'] = None

        # set to None if section (nullable) is None
        # and model_fields_set contains the field
        if self.section is None and "section" in self.model_fields_set:
            _dict['section'] = None

        # set to None if secureicon (nullable) is None
        # and model_fields_set contains the field
        if self.secureicon is None and "secureicon" in self.model_fields_set:
            _dict['secureicon'] = None

        # set to None if securetoolurl (nullable) is None
        # and model_fields_set contains the field
        if self.securetoolurl is None and "securetoolurl" in self.model_fields_set:
            _dict['securetoolurl'] = None

        # set to None if servicesalt (nullable) is None
        # and model_fields_set contains the field
        if self.servicesalt is None and "servicesalt" in self.model_fields_set:
            _dict['servicesalt'] = None

        # set to None if showdescriptionlaunch (nullable) is None
        # and model_fields_set contains the field
        if self.showdescriptionlaunch is None and "showdescriptionlaunch" in self.model_fields_set:
            _dict['showdescriptionlaunch'] = None

        # set to None if showtitlelaunch (nullable) is None
        # and model_fields_set contains the field
        if self.showtitlelaunch is None and "showtitlelaunch" in self.model_fields_set:
            _dict['showtitlelaunch'] = None

        # set to None if timecreated (nullable) is None
        # and model_fields_set contains the field
        if self.timecreated is None and "timecreated" in self.model_fields_set:
            _dict['timecreated'] = None

        # set to None if timemodified (nullable) is None
        # and model_fields_set contains the field
        if self.timemodified is None and "timemodified" in self.model_fields_set:
            _dict['timemodified'] = None

        # set to None if toolurl (nullable) is None
        # and model_fields_set contains the field
        if self.toolurl is None and "toolurl" in self.model_fields_set:
            _dict['toolurl'] = None

        # set to None if typeid (nullable) is None
        # and model_fields_set contains the field
        if self.typeid is None and "typeid" in self.model_fields_set:
            _dict['typeid'] = None

        # set to None if visible (nullable) is None
        # and model_fields_set contains the field
        if self.visible is None and "visible" in self.model_fields_set:
            _dict['visible'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModLtiGetLtisByCoursesResponseLtisInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "course": obj.get("course"),
            "coursemodule": obj.get("coursemodule"),
            "debuglaunch": obj.get("debuglaunch"),
            "grade": obj.get("grade"),
            "groupingid": obj.get("groupingid"),
            "groupmode": obj.get("groupmode"),
            "icon": obj.get("icon"),
            "id": obj.get("id"),
            "instructorchoiceacceptgrades": obj.get("instructorchoiceacceptgrades"),
            "instructorchoiceallowroster": obj.get("instructorchoiceallowroster"),
            "instructorchoiceallowsetting": obj.get("instructorchoiceallowsetting"),
            "instructorchoicesendemailaddr": obj.get("instructorchoicesendemailaddr"),
            "instructorchoicesendname": obj.get("instructorchoicesendname"),
            "instructorcustomparameters": obj.get("instructorcustomparameters"),
            "intro": obj.get("intro"),
            "introfiles": [CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["introfiles"]] if obj.get("introfiles") is not None else None,
            "introformat": obj.get("introformat"),
            "lang": obj.get("lang"),
            "launchcontainer": obj.get("launchcontainer"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "resourcekey": obj.get("resourcekey"),
            "section": obj.get("section"),
            "secureicon": obj.get("secureicon"),
            "securetoolurl": obj.get("securetoolurl"),
            "servicesalt": obj.get("servicesalt"),
            "showdescriptionlaunch": obj.get("showdescriptionlaunch"),
            "showtitlelaunch": obj.get("showtitlelaunch"),
            "timecreated": obj.get("timecreated"),
            "timemodified": obj.get("timemodified"),
            "toolurl": obj.get("toolurl"),
            "typeid": obj.get("typeid"),
            "visible": obj.get("visible")
        })
        return _obj


