# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from poodle_async_full.models.core_reportbuilder_columns_add_response_sortablecolumns_inner_sorticon import CoreReportbuilderColumnsAddResponseSortablecolumnsInnerSorticon
from typing import Optional, Set
from typing_extensions import Self

class CoreReportbuilderColumnsAddResponseSortablecolumnsInner(BaseModel):
    """
    CoreReportbuilderColumnsAddResponseSortablecolumnsInner
    """ # noqa: E501
    heading: StrictStr = Field(description="heading")
    id: StrictInt = Field(description="id")
    movetitle: StrictStr = Field(description="movetitle")
    sortdirection: StrictInt = Field(description="sortdirection")
    sortenabled: StrictBool = Field(description="sortenabled")
    sortenabledtitle: StrictStr = Field(description="sortenabledtitle")
    sorticon: CoreReportbuilderColumnsAddResponseSortablecolumnsInnerSorticon
    sortorder: StrictInt = Field(description="sortorder")
    title: StrictStr = Field(description="title")
    __properties: ClassVar[List[str]] = ["heading", "id", "movetitle", "sortdirection", "sortenabled", "sortenabledtitle", "sorticon", "sortorder", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreReportbuilderColumnsAddResponseSortablecolumnsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sorticon
        if self.sorticon:
            _dict['sorticon'] = self.sorticon.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreReportbuilderColumnsAddResponseSortablecolumnsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "heading": obj.get("heading") if obj.get("heading") is not None else '',
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "movetitle": obj.get("movetitle") if obj.get("movetitle") is not None else '',
            "sortdirection": obj.get("sortdirection") if obj.get("sortdirection") is not None else 0,
            "sortenabled": obj.get("sortenabled") if obj.get("sortenabled") is not None else False,
            "sortenabledtitle": obj.get("sortenabledtitle") if obj.get("sortenabledtitle") is not None else '',
            "sorticon": CoreReportbuilderColumnsAddResponseSortablecolumnsInnerSorticon.from_dict(obj["sorticon"]) if obj.get("sorticon") is not None else None,
            "sortorder": obj.get("sortorder") if obj.get("sortorder") is not None else 0,
            "title": obj.get("title") if obj.get("title") is not None else ''
        })
        return _obj


