# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.auth_email_get_signup_settings_response_warnings_inner import AuthEmailGetSignupSettingsResponseWarningsInner
from typing import Optional, Set
from typing_extensions import Self

class ToolDataprivacyGetAccessInformationResponse(BaseModel):
    """
    ToolDataprivacyGetAccessInformationResponse
    """ # noqa: E501
    cancontactdpo: Optional[StrictBool] = Field(description="Can contact dpo.")
    cancreatedatadeletionrequest: Optional[StrictBool] = Field(description="Can create data deletion request for self.")
    cancreatedatadownloadrequest: Optional[StrictBool] = Field(description="Can create data download request for self.")
    canmanagedatarequests: Optional[StrictBool] = Field(description="Can manage data requests.")
    hasongoingdatadeletionrequest: Optional[StrictBool] = Field(description="Has ongoing data deletion request.")
    hasongoingdatadownloadrequest: Optional[StrictBool] = Field(description="Has ongoing data download request.")
    warnings: Optional[List[AuthEmailGetSignupSettingsResponseWarningsInner]] = Field(default=None, description="list of warnings")
    __properties: ClassVar[List[str]] = ["cancontactdpo", "cancreatedatadeletionrequest", "cancreatedatadownloadrequest", "canmanagedatarequests", "hasongoingdatadeletionrequest", "hasongoingdatadownloadrequest", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolDataprivacyGetAccessInformationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # set to None if cancontactdpo (nullable) is None
        # and model_fields_set contains the field
        if self.cancontactdpo is None and "cancontactdpo" in self.model_fields_set:
            _dict['cancontactdpo'] = None

        # set to None if cancreatedatadeletionrequest (nullable) is None
        # and model_fields_set contains the field
        if self.cancreatedatadeletionrequest is None and "cancreatedatadeletionrequest" in self.model_fields_set:
            _dict['cancreatedatadeletionrequest'] = None

        # set to None if cancreatedatadownloadrequest (nullable) is None
        # and model_fields_set contains the field
        if self.cancreatedatadownloadrequest is None and "cancreatedatadownloadrequest" in self.model_fields_set:
            _dict['cancreatedatadownloadrequest'] = None

        # set to None if canmanagedatarequests (nullable) is None
        # and model_fields_set contains the field
        if self.canmanagedatarequests is None and "canmanagedatarequests" in self.model_fields_set:
            _dict['canmanagedatarequests'] = None

        # set to None if hasongoingdatadeletionrequest (nullable) is None
        # and model_fields_set contains the field
        if self.hasongoingdatadeletionrequest is None and "hasongoingdatadeletionrequest" in self.model_fields_set:
            _dict['hasongoingdatadeletionrequest'] = None

        # set to None if hasongoingdatadownloadrequest (nullable) is None
        # and model_fields_set contains the field
        if self.hasongoingdatadownloadrequest is None and "hasongoingdatadownloadrequest" in self.model_fields_set:
            _dict['hasongoingdatadownloadrequest'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolDataprivacyGetAccessInformationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancontactdpo": obj.get("cancontactdpo"),
            "cancreatedatadeletionrequest": obj.get("cancreatedatadeletionrequest"),
            "cancreatedatadownloadrequest": obj.get("cancreatedatadownloadrequest"),
            "canmanagedatarequests": obj.get("canmanagedatarequests"),
            "hasongoingdatadeletionrequest": obj.get("hasongoingdatadeletionrequest"),
            "hasongoingdatadownloadrequest": obj.get("hasongoingdatadownloadrequest"),
            "warnings": [AuthEmailGetSignupSettingsResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


