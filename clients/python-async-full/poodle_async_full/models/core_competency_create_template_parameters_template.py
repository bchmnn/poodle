# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreCompetencyCreateTemplateParametersTemplate(BaseModel):
    """
    CoreCompetencyCreateTemplateParametersTemplate
    """ # noqa: E501
    contextid: Optional[StrictInt] = Field(default=None, description="The context id")
    contextlevel: Optional[StrictStr] = Field(default=None, description="The context level")
    description: Optional[StrictStr] = Field(default='', description="description")
    descriptionformat: Optional[StrictInt] = Field(default=1, description="description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    duedate: Optional[StrictInt] = Field(default=0, description="duedate")
    instanceid: Optional[StrictInt] = Field(default=None, description="The Instance id")
    shortname: StrictStr = Field(description="shortname")
    timecreated: Optional[StrictInt] = Field(default=0, description="timecreated")
    timemodified: Optional[StrictInt] = Field(default=0, description="timemodified")
    usermodified: Optional[StrictInt] = Field(default=0, description="usermodified")
    visible: Optional[StrictBool] = Field(default=True, description="visible")
    __properties: ClassVar[List[str]] = ["contextid", "contextlevel", "description", "descriptionformat", "duedate", "instanceid", "shortname", "timecreated", "timemodified", "usermodified", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCompetencyCreateTemplateParametersTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if contextid (nullable) is None
        # and model_fields_set contains the field
        if self.contextid is None and "contextid" in self.model_fields_set:
            _dict['contextid'] = None

        # set to None if contextlevel (nullable) is None
        # and model_fields_set contains the field
        if self.contextlevel is None and "contextlevel" in self.model_fields_set:
            _dict['contextlevel'] = None

        # set to None if descriptionformat (nullable) is None
        # and model_fields_set contains the field
        if self.descriptionformat is None and "descriptionformat" in self.model_fields_set:
            _dict['descriptionformat'] = None

        # set to None if instanceid (nullable) is None
        # and model_fields_set contains the field
        if self.instanceid is None and "instanceid" in self.model_fields_set:
            _dict['instanceid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCompetencyCreateTemplateParametersTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contextid": obj.get("contextid"),
            "contextlevel": obj.get("contextlevel"),
            "description": obj.get("description") if obj.get("description") is not None else '',
            "descriptionformat": obj.get("descriptionformat") if obj.get("descriptionformat") is not None else 1,
            "duedate": obj.get("duedate") if obj.get("duedate") is not None else 0,
            "instanceid": obj.get("instanceid"),
            "shortname": obj.get("shortname") if obj.get("shortname") is not None else '',
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else 0,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else 0,
            "usermodified": obj.get("usermodified") if obj.get("usermodified") is not None else 0,
            "visible": obj.get("visible") if obj.get("visible") is not None else True
        })
        return _obj


