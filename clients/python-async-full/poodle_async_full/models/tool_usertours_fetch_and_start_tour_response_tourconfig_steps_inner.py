# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ToolUsertoursFetchAndStartTourResponseTourconfigStepsInner(BaseModel):
    """
    ToolUsertoursFetchAndStartTourResponseTourconfigStepsInner
    """ # noqa: E501
    backdrop: Optional[StrictBool] = Field(default=None, description="Whether a backdrop should be used")
    content: Optional[StrictStr] = Field(description="Step Content")
    delay: Optional[StrictInt] = Field(default=None, description="Delay before showing the step (ms)")
    element: Optional[StrictStr] = Field(description="Step Target")
    orphan: Optional[StrictBool] = Field(default=None, description="Whether to display the step even if it could not be found")
    placement: Optional[StrictStr] = Field(description="Step Placement")
    reflex: Optional[StrictBool] = Field(default=None, description="Whether to move to the next step when the target element is clicked")
    stepid: Optional[StrictInt] = Field(default=None, description="The actual ID of the step")
    title: Optional[StrictStr] = Field(description="Step Title")
    __properties: ClassVar[List[str]] = ["backdrop", "content", "delay", "element", "orphan", "placement", "reflex", "stepid", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolUsertoursFetchAndStartTourResponseTourconfigStepsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if backdrop (nullable) is None
        # and model_fields_set contains the field
        if self.backdrop is None and "backdrop" in self.model_fields_set:
            _dict['backdrop'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if delay (nullable) is None
        # and model_fields_set contains the field
        if self.delay is None and "delay" in self.model_fields_set:
            _dict['delay'] = None

        # set to None if element (nullable) is None
        # and model_fields_set contains the field
        if self.element is None and "element" in self.model_fields_set:
            _dict['element'] = None

        # set to None if orphan (nullable) is None
        # and model_fields_set contains the field
        if self.orphan is None and "orphan" in self.model_fields_set:
            _dict['orphan'] = None

        # set to None if placement (nullable) is None
        # and model_fields_set contains the field
        if self.placement is None and "placement" in self.model_fields_set:
            _dict['placement'] = None

        # set to None if reflex (nullable) is None
        # and model_fields_set contains the field
        if self.reflex is None and "reflex" in self.model_fields_set:
            _dict['reflex'] = None

        # set to None if stepid (nullable) is None
        # and model_fields_set contains the field
        if self.stepid is None and "stepid" in self.model_fields_set:
            _dict['stepid'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolUsertoursFetchAndStartTourResponseTourconfigStepsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backdrop": obj.get("backdrop"),
            "content": obj.get("content"),
            "delay": obj.get("delay"),
            "element": obj.get("element"),
            "orphan": obj.get("orphan"),
            "placement": obj.get("placement"),
            "reflex": obj.get("reflex"),
            "stepid": obj.get("stepid"),
            "title": obj.get("title")
        })
        return _obj


