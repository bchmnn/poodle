# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_block_get_course_blocks_response_blocks_inner_contents_files_inner import CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner
from poodle_async_full.models.tool_mobile_get_content_response_otherdata_inner import ToolMobileGetContentResponseOtherdataInner
from poodle_async_full.models.tool_mobile_get_content_response_restrict import ToolMobileGetContentResponseRestrict
from poodle_async_full.models.tool_mobile_get_content_response_templates_inner import ToolMobileGetContentResponseTemplatesInner
from typing import Optional, Set
from typing_extensions import Self

class ToolMobileGetContentResponse(BaseModel):
    """
    ToolMobileGetContentResponse
    """ # noqa: E501
    disabled: Optional[StrictBool] = Field(default=None, description="Whether we consider this disabled or not.")
    files: List[CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner] = Field(description="Files in the content.")
    javascript: Optional[StrictStr] = Field(description="JavaScript code.")
    otherdata: List[ToolMobileGetContentResponseOtherdataInner] = Field(description="Other data that can be used or manipulated by the template via 2-way data-binding.")
    restrict: ToolMobileGetContentResponseRestrict
    templates: List[ToolMobileGetContentResponseTemplatesInner] = Field(description="Templates required by the generated content.")
    __properties: ClassVar[List[str]] = ["disabled", "files", "javascript", "otherdata", "restrict", "templates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolMobileGetContentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in otherdata (list)
        _items = []
        if self.otherdata:
            for _item_otherdata in self.otherdata:
                if _item_otherdata:
                    _items.append(_item_otherdata.to_dict())
            _dict['otherdata'] = _items
        # override the default output from pydantic by calling `to_dict()` of restrict
        if self.restrict:
            _dict['restrict'] = self.restrict.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in templates (list)
        _items = []
        if self.templates:
            for _item_templates in self.templates:
                if _item_templates:
                    _items.append(_item_templates.to_dict())
            _dict['templates'] = _items
        # set to None if disabled (nullable) is None
        # and model_fields_set contains the field
        if self.disabled is None and "disabled" in self.model_fields_set:
            _dict['disabled'] = None

        # set to None if javascript (nullable) is None
        # and model_fields_set contains the field
        if self.javascript is None and "javascript" in self.model_fields_set:
            _dict['javascript'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolMobileGetContentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabled": obj.get("disabled"),
            "files": [CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "javascript": obj.get("javascript"),
            "otherdata": [ToolMobileGetContentResponseOtherdataInner.from_dict(_item) for _item in obj["otherdata"]] if obj.get("otherdata") is not None else None,
            "restrict": ToolMobileGetContentResponseRestrict.from_dict(obj["restrict"]) if obj.get("restrict") is not None else None,
            "templates": [ToolMobileGetContentResponseTemplatesInner.from_dict(_item) for _item in obj["templates"]] if obj.get("templates") is not None else None
        })
        return _obj


