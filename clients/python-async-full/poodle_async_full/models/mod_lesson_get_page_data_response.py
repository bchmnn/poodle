# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.auth_email_get_signup_settings_response_warnings_inner import AuthEmailGetSignupSettingsResponseWarningsInner
from poodle_async_full.models.core_block_get_course_blocks_response_blocks_inner_contents_files_inner import CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner
from poodle_async_full.models.mod_lesson_finish_attempt_response_messages_inner import ModLessonFinishAttemptResponseMessagesInner
from poodle_async_full.models.mod_lesson_get_page_data_response_answers_inner import ModLessonGetPageDataResponseAnswersInner
from poodle_async_full.models.mod_lesson_get_page_data_response_page import ModLessonGetPageDataResponsePage
from typing import Optional, Set
from typing_extensions import Self

class ModLessonGetPageDataResponse(BaseModel):
    """
    ModLessonGetPageDataResponse
    """ # noqa: E501
    answers: List[ModLessonGetPageDataResponseAnswersInner]
    contentfiles: List[CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner] = Field(description="List of files.")
    displaymenu: Optional[StrictBool] = Field(description="Whether we should display the menu or not in this page.")
    messages: List[ModLessonFinishAttemptResponseMessagesInner]
    newpageid: Optional[StrictInt] = Field(description="New page id (if a jump was made)")
    ongoingscore: Optional[StrictStr] = Field(description="The ongoing score message")
    page: Optional[ModLessonGetPageDataResponsePage] = None
    pagecontent: Optional[StrictStr] = Field(default=None, description="Page html content")
    progress: Optional[StrictInt] = Field(description="Progress percentage in the lesson")
    warnings: Optional[List[AuthEmailGetSignupSettingsResponseWarningsInner]] = Field(default=None, description="list of warnings")
    __properties: ClassVar[List[str]] = ["answers", "contentfiles", "displaymenu", "messages", "newpageid", "ongoingscore", "page", "pagecontent", "progress", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModLessonGetPageDataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in answers (list)
        _items = []
        if self.answers:
            for _item_answers in self.answers:
                if _item_answers:
                    _items.append(_item_answers.to_dict())
            _dict['answers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contentfiles (list)
        _items = []
        if self.contentfiles:
            for _item_contentfiles in self.contentfiles:
                if _item_contentfiles:
                    _items.append(_item_contentfiles.to_dict())
            _dict['contentfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of page
        if self.page:
            _dict['page'] = self.page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # set to None if displaymenu (nullable) is None
        # and model_fields_set contains the field
        if self.displaymenu is None and "displaymenu" in self.model_fields_set:
            _dict['displaymenu'] = None

        # set to None if newpageid (nullable) is None
        # and model_fields_set contains the field
        if self.newpageid is None and "newpageid" in self.model_fields_set:
            _dict['newpageid'] = None

        # set to None if ongoingscore (nullable) is None
        # and model_fields_set contains the field
        if self.ongoingscore is None and "ongoingscore" in self.model_fields_set:
            _dict['ongoingscore'] = None

        # set to None if pagecontent (nullable) is None
        # and model_fields_set contains the field
        if self.pagecontent is None and "pagecontent" in self.model_fields_set:
            _dict['pagecontent'] = None

        # set to None if progress (nullable) is None
        # and model_fields_set contains the field
        if self.progress is None and "progress" in self.model_fields_set:
            _dict['progress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModLessonGetPageDataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answers": [ModLessonGetPageDataResponseAnswersInner.from_dict(_item) for _item in obj["answers"]] if obj.get("answers") is not None else None,
            "contentfiles": [CoreBlockGetCourseBlocksResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["contentfiles"]] if obj.get("contentfiles") is not None else None,
            "displaymenu": obj.get("displaymenu"),
            "messages": [ModLessonFinishAttemptResponseMessagesInner.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "newpageid": obj.get("newpageid"),
            "ongoingscore": obj.get("ongoingscore"),
            "page": ModLessonGetPageDataResponsePage.from_dict(obj["page"]) if obj.get("page") is not None else None,
            "pagecontent": obj.get("pagecontent"),
            "progress": obj.get("progress"),
            "warnings": [AuthEmailGetSignupSettingsResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


