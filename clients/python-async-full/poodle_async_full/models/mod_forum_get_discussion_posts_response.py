# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.auth_email_get_signup_settings_response_warnings_inner import AuthEmailGetSignupSettingsResponseWarningsInner
from poodle_async_full.models.mod_data_get_entry_response_ratinginfo import ModDataGetEntryResponseRatinginfo
from poodle_async_full.models.mod_forum_add_discussion_post_response_post import ModForumAddDiscussionPostResponsePost
from typing import Optional, Set
from typing_extensions import Self

class ModForumGetDiscussionPostsResponse(BaseModel):
    """
    ModForumGetDiscussionPostsResponse
    """ # noqa: E501
    courseid: Optional[StrictInt] = Field(description="The forum course id")
    forumid: Optional[StrictInt] = Field(description="The forum id")
    posts: List[ModForumAddDiscussionPostResponsePost]
    ratinginfo: Optional[ModDataGetEntryResponseRatinginfo] = None
    warnings: Optional[List[AuthEmailGetSignupSettingsResponseWarningsInner]] = Field(default=None, description="list of warnings")
    __properties: ClassVar[List[str]] = ["courseid", "forumid", "posts", "ratinginfo", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModForumGetDiscussionPostsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in posts (list)
        _items = []
        if self.posts:
            for _item_posts in self.posts:
                if _item_posts:
                    _items.append(_item_posts.to_dict())
            _dict['posts'] = _items
        # override the default output from pydantic by calling `to_dict()` of ratinginfo
        if self.ratinginfo:
            _dict['ratinginfo'] = self.ratinginfo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # set to None if courseid (nullable) is None
        # and model_fields_set contains the field
        if self.courseid is None and "courseid" in self.model_fields_set:
            _dict['courseid'] = None

        # set to None if forumid (nullable) is None
        # and model_fields_set contains the field
        if self.forumid is None and "forumid" in self.model_fields_set:
            _dict['forumid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModForumGetDiscussionPostsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "courseid": obj.get("courseid"),
            "forumid": obj.get("forumid"),
            "posts": [ModForumAddDiscussionPostResponsePost.from_dict(_item) for _item in obj["posts"]] if obj.get("posts") is not None else None,
            "ratinginfo": ModDataGetEntryResponseRatinginfo.from_dict(obj["ratinginfo"]) if obj.get("ratinginfo") is not None else None,
            "warnings": [AuthEmailGetSignupSettingsResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


