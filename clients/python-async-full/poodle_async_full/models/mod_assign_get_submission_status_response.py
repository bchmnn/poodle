# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.auth_email_get_signup_settings_response_warnings_inner import AuthEmailGetSignupSettingsResponseWarningsInner
from poodle_async_full.models.mod_assign_get_submission_status_response_assignmentdata import ModAssignGetSubmissionStatusResponseAssignmentdata
from poodle_async_full.models.mod_assign_get_submission_status_response_feedback import ModAssignGetSubmissionStatusResponseFeedback
from poodle_async_full.models.mod_assign_get_submission_status_response_gradingsummary import ModAssignGetSubmissionStatusResponseGradingsummary
from poodle_async_full.models.mod_assign_get_submission_status_response_lastattempt import ModAssignGetSubmissionStatusResponseLastattempt
from poodle_async_full.models.mod_assign_get_submission_status_response_previousattempts_inner import ModAssignGetSubmissionStatusResponsePreviousattemptsInner
from typing import Optional, Set
from typing_extensions import Self

class ModAssignGetSubmissionStatusResponse(BaseModel):
    """
    ModAssignGetSubmissionStatusResponse
    """ # noqa: E501
    assignmentdata: Optional[ModAssignGetSubmissionStatusResponseAssignmentdata] = None
    feedback: Optional[ModAssignGetSubmissionStatusResponseFeedback] = None
    gradingsummary: Optional[ModAssignGetSubmissionStatusResponseGradingsummary] = None
    lastattempt: Optional[ModAssignGetSubmissionStatusResponseLastattempt] = None
    previousattempts: Optional[List[ModAssignGetSubmissionStatusResponsePreviousattemptsInner]] = Field(default=None, description="List all the previous attempts did by the user.")
    warnings: Optional[List[AuthEmailGetSignupSettingsResponseWarningsInner]] = Field(default=None, description="list of warnings")
    __properties: ClassVar[List[str]] = ["assignmentdata", "feedback", "gradingsummary", "lastattempt", "previousattempts", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModAssignGetSubmissionStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assignmentdata
        if self.assignmentdata:
            _dict['assignmentdata'] = self.assignmentdata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feedback
        if self.feedback:
            _dict['feedback'] = self.feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gradingsummary
        if self.gradingsummary:
            _dict['gradingsummary'] = self.gradingsummary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lastattempt
        if self.lastattempt:
            _dict['lastattempt'] = self.lastattempt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in previousattempts (list)
        _items = []
        if self.previousattempts:
            for _item_previousattempts in self.previousattempts:
                if _item_previousattempts:
                    _items.append(_item_previousattempts.to_dict())
            _dict['previousattempts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModAssignGetSubmissionStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignmentdata": ModAssignGetSubmissionStatusResponseAssignmentdata.from_dict(obj["assignmentdata"]) if obj.get("assignmentdata") is not None else None,
            "feedback": ModAssignGetSubmissionStatusResponseFeedback.from_dict(obj["feedback"]) if obj.get("feedback") is not None else None,
            "gradingsummary": ModAssignGetSubmissionStatusResponseGradingsummary.from_dict(obj["gradingsummary"]) if obj.get("gradingsummary") is not None else None,
            "lastattempt": ModAssignGetSubmissionStatusResponseLastattempt.from_dict(obj["lastattempt"]) if obj.get("lastattempt") is not None else None,
            "previousattempts": [ModAssignGetSubmissionStatusResponsePreviousattemptsInner.from_dict(_item) for _item in obj["previousattempts"]] if obj.get("previousattempts") is not None else None,
            "warnings": [AuthEmailGetSignupSettingsResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


