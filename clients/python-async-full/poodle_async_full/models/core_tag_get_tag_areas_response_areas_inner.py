# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreTagGetTagAreasResponseAreasInner(BaseModel):
    """
    CoreTagGetTagAreasResponseAreasInner
    """ # noqa: E501
    callback: Optional[StrictStr] = Field(description="Component callback for processing tags.")
    callbackfile: Optional[StrictStr] = Field(description="Component callback file.")
    component: StrictStr = Field(description="Component the area is related to.")
    enabled: StrictBool = Field(description="Whether this area is enabled.")
    id: StrictInt = Field(description="Area id.")
    itemtype: StrictStr = Field(description="Type of item in the component.")
    locked: Optional[StrictBool] = Field(default=False, description="Whether the area is locked.")
    multiplecontexts: StrictBool = Field(description="Whether the tag area allows tag instances to be created in multiple contexts. ")
    showstandard: StrictInt = Field(description="Return whether to display only standard, only non-standard or both tags.")
    tagcollid: StrictInt = Field(description="The tag collection this are belongs to.")
    __properties: ClassVar[List[str]] = ["callback", "callbackfile", "component", "enabled", "id", "itemtype", "locked", "multiplecontexts", "showstandard", "tagcollid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreTagGetTagAreasResponseAreasInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if callback (nullable) is None
        # and model_fields_set contains the field
        if self.callback is None and "callback" in self.model_fields_set:
            _dict['callback'] = None

        # set to None if callbackfile (nullable) is None
        # and model_fields_set contains the field
        if self.callbackfile is None and "callbackfile" in self.model_fields_set:
            _dict['callbackfile'] = None

        # set to None if locked (nullable) is None
        # and model_fields_set contains the field
        if self.locked is None and "locked" in self.model_fields_set:
            _dict['locked'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreTagGetTagAreasResponseAreasInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callback": obj.get("callback"),
            "callbackfile": obj.get("callbackfile"),
            "component": obj.get("component") if obj.get("component") is not None else '',
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "itemtype": obj.get("itemtype") if obj.get("itemtype") is not None else '',
            "locked": obj.get("locked") if obj.get("locked") is not None else False,
            "multiplecontexts": obj.get("multiplecontexts") if obj.get("multiplecontexts") is not None else False,
            "showstandard": obj.get("showstandard") if obj.get("showstandard") is not None else 0,
            "tagcollid": obj.get("tagcollid") if obj.get("tagcollid") is not None else 0
        })
        return _obj


