# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.message_popup_get_popup_notifications_response_notifications_inner import MessagePopupGetPopupNotificationsResponseNotificationsInner
from typing import Optional, Set
from typing_extensions import Self

class MessagePopupGetPopupNotificationsResponse(BaseModel):
    """
    MessagePopupGetPopupNotificationsResponse
    """ # noqa: E501
    notifications: List[MessagePopupGetPopupNotificationsResponseNotificationsInner]
    unreadcount: Optional[StrictInt] = Field(description="the number of unread message for the given user")
    __properties: ClassVar[List[str]] = ["notifications", "unreadcount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagePopupGetPopupNotificationsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item_notifications in self.notifications:
                if _item_notifications:
                    _items.append(_item_notifications.to_dict())
            _dict['notifications'] = _items
        # set to None if unreadcount (nullable) is None
        # and model_fields_set contains the field
        if self.unreadcount is None and "unreadcount" in self.model_fields_set:
            _dict['unreadcount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagePopupGetPopupNotificationsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "notifications": [MessagePopupGetPopupNotificationsResponseNotificationsInner.from_dict(_item) for _item in obj["notifications"]] if obj.get("notifications") is not None else None,
            "unreadcount": obj.get("unreadcount")
        })
        return _obj


