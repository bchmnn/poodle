# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreTagGetTagsResponseTagsInner(BaseModel):
    """
    information about one tag
    """ # noqa: E501
    description: Optional[StrictStr] = Field(description="tag description")
    descriptionformat: Optional[StrictInt] = Field(description="description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    flag: Optional[StrictInt] = Field(default=None, description="flag")
    id: Optional[StrictInt] = Field(description="tag id")
    isstandard: Optional[StrictInt] = Field(default=None, description="whether this flag is standard")
    name: Optional[StrictStr] = Field(description="name")
    official: Optional[StrictInt] = Field(default=None, description="whether this flag is standard (deprecated, use isstandard)")
    rawname: Optional[StrictStr] = Field(description="tag raw name (may contain capital letters)")
    tagcollid: Optional[StrictInt] = Field(description="tag collection id")
    viewurl: Optional[StrictStr] = Field(description="URL to view")
    __properties: ClassVar[List[str]] = ["description", "descriptionformat", "flag", "id", "isstandard", "name", "official", "rawname", "tagcollid", "viewurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreTagGetTagsResponseTagsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if descriptionformat (nullable) is None
        # and model_fields_set contains the field
        if self.descriptionformat is None and "descriptionformat" in self.model_fields_set:
            _dict['descriptionformat'] = None

        # set to None if flag (nullable) is None
        # and model_fields_set contains the field
        if self.flag is None and "flag" in self.model_fields_set:
            _dict['flag'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if isstandard (nullable) is None
        # and model_fields_set contains the field
        if self.isstandard is None and "isstandard" in self.model_fields_set:
            _dict['isstandard'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if official (nullable) is None
        # and model_fields_set contains the field
        if self.official is None and "official" in self.model_fields_set:
            _dict['official'] = None

        # set to None if rawname (nullable) is None
        # and model_fields_set contains the field
        if self.rawname is None and "rawname" in self.model_fields_set:
            _dict['rawname'] = None

        # set to None if tagcollid (nullable) is None
        # and model_fields_set contains the field
        if self.tagcollid is None and "tagcollid" in self.model_fields_set:
            _dict['tagcollid'] = None

        # set to None if viewurl (nullable) is None
        # and model_fields_set contains the field
        if self.viewurl is None and "viewurl" in self.model_fields_set:
            _dict['viewurl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreTagGetTagsResponseTagsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "descriptionformat": obj.get("descriptionformat"),
            "flag": obj.get("flag"),
            "id": obj.get("id"),
            "isstandard": obj.get("isstandard"),
            "name": obj.get("name"),
            "official": obj.get("official"),
            "rawname": obj.get("rawname"),
            "tagcollid": obj.get("tagcollid"),
            "viewurl": obj.get("viewurl")
        })
        return _obj


