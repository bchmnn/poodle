# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_grading_get_gradingform_instances_response_instances_inner_guide import CoreGradingGetGradingformInstancesResponseInstancesInnerGuide
from poodle_async_full.models.core_grading_get_gradingform_instances_response_instances_inner_rubric import CoreGradingGetGradingformInstancesResponseInstancesInnerRubric
from typing import Optional, Set
from typing_extensions import Self

class CoreGradingGetGradingformInstancesResponseInstancesInner(BaseModel):
    """
    CoreGradingGetGradingformInstancesResponseInstancesInner
    """ # noqa: E501
    feedback: Optional[StrictStr] = Field(default=None, description="feedback")
    feedbackformat: Optional[StrictInt] = Field(default=None, description="feedback format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    guide: Optional[CoreGradingGetGradingformInstancesResponseInstancesInnerGuide] = None
    id: Optional[StrictInt] = Field(description="instance id")
    itemid: Optional[StrictInt] = Field(description="item id")
    raterid: Optional[StrictInt] = Field(description="rater id")
    rawgrade: Optional[StrictStr] = Field(default=None, description="raw grade")
    rubric: Optional[CoreGradingGetGradingformInstancesResponseInstancesInnerRubric] = None
    status: Optional[StrictInt] = Field(description="status")
    timemodified: Optional[StrictInt] = Field(description="modified time")
    __properties: ClassVar[List[str]] = ["feedback", "feedbackformat", "guide", "id", "itemid", "raterid", "rawgrade", "rubric", "status", "timemodified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreGradingGetGradingformInstancesResponseInstancesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guide
        if self.guide:
            _dict['guide'] = self.guide.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rubric
        if self.rubric:
            _dict['rubric'] = self.rubric.to_dict()
        # set to None if feedback (nullable) is None
        # and model_fields_set contains the field
        if self.feedback is None and "feedback" in self.model_fields_set:
            _dict['feedback'] = None

        # set to None if feedbackformat (nullable) is None
        # and model_fields_set contains the field
        if self.feedbackformat is None and "feedbackformat" in self.model_fields_set:
            _dict['feedbackformat'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if itemid (nullable) is None
        # and model_fields_set contains the field
        if self.itemid is None and "itemid" in self.model_fields_set:
            _dict['itemid'] = None

        # set to None if raterid (nullable) is None
        # and model_fields_set contains the field
        if self.raterid is None and "raterid" in self.model_fields_set:
            _dict['raterid'] = None

        # set to None if rawgrade (nullable) is None
        # and model_fields_set contains the field
        if self.rawgrade is None and "rawgrade" in self.model_fields_set:
            _dict['rawgrade'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if timemodified (nullable) is None
        # and model_fields_set contains the field
        if self.timemodified is None and "timemodified" in self.model_fields_set:
            _dict['timemodified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreGradingGetGradingformInstancesResponseInstancesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feedback": obj.get("feedback"),
            "feedbackformat": obj.get("feedbackformat"),
            "guide": CoreGradingGetGradingformInstancesResponseInstancesInnerGuide.from_dict(obj["guide"]) if obj.get("guide") is not None else None,
            "id": obj.get("id"),
            "itemid": obj.get("itemid"),
            "raterid": obj.get("raterid"),
            "rawgrade": obj.get("rawgrade"),
            "rubric": CoreGradingGetGradingformInstancesResponseInstancesInnerRubric.from_dict(obj["rubric"]) if obj.get("rubric") is not None else None,
            "status": obj.get("status"),
            "timemodified": obj.get("timemodified")
        })
        return _obj


