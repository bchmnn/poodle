# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_form_get_filetypes_browser_data_response_groups_inner_types_inner import CoreFormGetFiletypesBrowserDataResponseGroupsInnerTypesInner
from typing import Optional, Set
from typing_extensions import Self

class CoreFormGetFiletypesBrowserDataResponseGroupsInner(BaseModel):
    """
    CoreFormGetFiletypesBrowserDataResponseGroupsInner
    """ # noqa: E501
    expanded: Optional[StrictBool] = Field(description="Should the group start as expanded or collapsed")
    ext: Optional[StrictStr] = Field(description="The list of file extensions associated with the group")
    key: Optional[StrictStr] = Field(description="The file type group identifier")
    name: Optional[StrictStr] = Field(description="The file type group name")
    selectable: Optional[StrictBool] = Field(description="Can it be marked as selected")
    selected: Optional[StrictBool] = Field(description="Should it be marked as selected")
    types: List[CoreFormGetFiletypesBrowserDataResponseGroupsInnerTypesInner] = Field(description="List of file types in the group")
    __properties: ClassVar[List[str]] = ["expanded", "ext", "key", "name", "selectable", "selected", "types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreFormGetFiletypesBrowserDataResponseGroupsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in types (list)
        _items = []
        if self.types:
            for _item_types in self.types:
                if _item_types:
                    _items.append(_item_types.to_dict())
            _dict['types'] = _items
        # set to None if expanded (nullable) is None
        # and model_fields_set contains the field
        if self.expanded is None and "expanded" in self.model_fields_set:
            _dict['expanded'] = None

        # set to None if ext (nullable) is None
        # and model_fields_set contains the field
        if self.ext is None and "ext" in self.model_fields_set:
            _dict['ext'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['key'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if selectable (nullable) is None
        # and model_fields_set contains the field
        if self.selectable is None and "selectable" in self.model_fields_set:
            _dict['selectable'] = None

        # set to None if selected (nullable) is None
        # and model_fields_set contains the field
        if self.selected is None and "selected" in self.model_fields_set:
            _dict['selected'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreFormGetFiletypesBrowserDataResponseGroupsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expanded": obj.get("expanded"),
            "ext": obj.get("ext"),
            "key": obj.get("key"),
            "name": obj.get("name"),
            "selectable": obj.get("selectable"),
            "selected": obj.get("selected"),
            "types": [CoreFormGetFiletypesBrowserDataResponseGroupsInnerTypesInner.from_dict(_item) for _item in obj["types"]] if obj.get("types") is not None else None
        })
        return _obj


