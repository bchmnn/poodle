# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreCompletionOverrideActivityCompletionStatusResponse(BaseModel):
    """
    CoreCompletionOverrideActivityCompletionStatusResponse
    """ # noqa: E501
    cmid: Optional[StrictInt] = Field(description="The course module id")
    overrideby: Optional[StrictInt] = Field(description="The user id who has overriden the status, or null")
    state: Optional[StrictInt] = Field(description="The current completion state.")
    timecompleted: Optional[StrictInt] = Field(description="time of completion")
    tracking: Optional[StrictInt] = Field(description="type of tracking:                                                                     0 means none, 1 manual, 2 automatic")
    userid: Optional[StrictInt] = Field(description="The user id to which the completion info belongs")
    __properties: ClassVar[List[str]] = ["cmid", "overrideby", "state", "timecompleted", "tracking", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCompletionOverrideActivityCompletionStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cmid (nullable) is None
        # and model_fields_set contains the field
        if self.cmid is None and "cmid" in self.model_fields_set:
            _dict['cmid'] = None

        # set to None if overrideby (nullable) is None
        # and model_fields_set contains the field
        if self.overrideby is None and "overrideby" in self.model_fields_set:
            _dict['overrideby'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if timecompleted (nullable) is None
        # and model_fields_set contains the field
        if self.timecompleted is None and "timecompleted" in self.model_fields_set:
            _dict['timecompleted'] = None

        # set to None if tracking (nullable) is None
        # and model_fields_set contains the field
        if self.tracking is None and "tracking" in self.model_fields_set:
            _dict['tracking'] = None

        # set to None if userid (nullable) is None
        # and model_fields_set contains the field
        if self.userid is None and "userid" in self.model_fields_set:
            _dict['userid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCompletionOverrideActivityCompletionStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cmid": obj.get("cmid"),
            "overrideby": obj.get("overrideby"),
            "state": obj.get("state"),
            "timecompleted": obj.get("timecompleted"),
            "tracking": obj.get("tracking"),
            "userid": obj.get("userid")
        })
        return _obj


