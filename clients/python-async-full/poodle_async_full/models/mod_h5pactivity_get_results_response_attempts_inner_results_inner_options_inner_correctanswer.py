# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModH5pactivityGetResultsResponseAttemptsInnerResultsInnerOptionsInnerCorrectanswer(BaseModel):
    """
    The option correct answer
    """ # noqa: E501
    answer: Optional[StrictStr] = Field(default=None, description="Option text value")
    checked: Optional[StrictBool] = Field(default=None, description="If has to be displayed as a checked option")
    correct: Optional[StrictBool] = Field(default=None, description="If has to be displayed as correct")
    fail: Optional[StrictBool] = Field(default=None, description="If has to be displayed as failed")
    incorrect: Optional[StrictBool] = Field(default=None, description="If has to be displayed as incorrect")
    var_pass: Optional[StrictBool] = Field(default=None, description="If has to be displayed as passed", alias="pass")
    text: Optional[StrictBool] = Field(default=None, description="If has to be displayed as simple text")
    unchecked: Optional[StrictBool] = Field(default=None, description="If has to be displayed as a unchecked option")
    __properties: ClassVar[List[str]] = ["answer", "checked", "correct", "fail", "incorrect", "pass", "text", "unchecked"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModH5pactivityGetResultsResponseAttemptsInnerResultsInnerOptionsInnerCorrectanswer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if answer (nullable) is None
        # and model_fields_set contains the field
        if self.answer is None and "answer" in self.model_fields_set:
            _dict['answer'] = None

        # set to None if checked (nullable) is None
        # and model_fields_set contains the field
        if self.checked is None and "checked" in self.model_fields_set:
            _dict['checked'] = None

        # set to None if correct (nullable) is None
        # and model_fields_set contains the field
        if self.correct is None and "correct" in self.model_fields_set:
            _dict['correct'] = None

        # set to None if fail (nullable) is None
        # and model_fields_set contains the field
        if self.fail is None and "fail" in self.model_fields_set:
            _dict['fail'] = None

        # set to None if incorrect (nullable) is None
        # and model_fields_set contains the field
        if self.incorrect is None and "incorrect" in self.model_fields_set:
            _dict['incorrect'] = None

        # set to None if var_pass (nullable) is None
        # and model_fields_set contains the field
        if self.var_pass is None and "var_pass" in self.model_fields_set:
            _dict['pass'] = None

        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if unchecked (nullable) is None
        # and model_fields_set contains the field
        if self.unchecked is None and "unchecked" in self.model_fields_set:
            _dict['unchecked'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModH5pactivityGetResultsResponseAttemptsInnerResultsInnerOptionsInnerCorrectanswer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answer": obj.get("answer"),
            "checked": obj.get("checked"),
            "correct": obj.get("correct"),
            "fail": obj.get("fail"),
            "incorrect": obj.get("incorrect"),
            "pass": obj.get("pass"),
            "text": obj.get("text"),
            "unchecked": obj.get("unchecked")
        })
        return _obj


