# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.mod_data_get_entry_response_ratinginfo_ratings_inner import ModDataGetEntryResponseRatinginfoRatingsInner
from poodle_async_full.models.mod_data_get_entry_response_ratinginfo_scales_inner import ModDataGetEntryResponseRatinginfoScalesInner
from typing import Optional, Set
from typing_extensions import Self

class ModDataGetEntryResponseRatinginfo(BaseModel):
    """
    Rating information
    """ # noqa: E501
    canviewall: Optional[StrictBool] = Field(default=None, description="Whether the user can view all the individual ratings.")
    canviewany: Optional[StrictBool] = Field(default=None, description="Whether the user can view aggregate of ratings of others.")
    component: Optional[StrictStr] = Field(description="Context name.")
    contextid: Optional[StrictInt] = Field(description="Context id.")
    ratingarea: Optional[StrictStr] = Field(description="Rating area name.")
    ratings: Optional[List[ModDataGetEntryResponseRatinginfoRatingsInner]] = Field(default=None, description="The ratings")
    scales: Optional[List[ModDataGetEntryResponseRatinginfoScalesInner]] = Field(default=None, description="Different scales used information")
    __properties: ClassVar[List[str]] = ["canviewall", "canviewany", "component", "contextid", "ratingarea", "ratings", "scales"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModDataGetEntryResponseRatinginfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ratings (list)
        _items = []
        if self.ratings:
            for _item_ratings in self.ratings:
                if _item_ratings:
                    _items.append(_item_ratings.to_dict())
            _dict['ratings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scales (list)
        _items = []
        if self.scales:
            for _item_scales in self.scales:
                if _item_scales:
                    _items.append(_item_scales.to_dict())
            _dict['scales'] = _items
        # set to None if canviewall (nullable) is None
        # and model_fields_set contains the field
        if self.canviewall is None and "canviewall" in self.model_fields_set:
            _dict['canviewall'] = None

        # set to None if canviewany (nullable) is None
        # and model_fields_set contains the field
        if self.canviewany is None and "canviewany" in self.model_fields_set:
            _dict['canviewany'] = None

        # set to None if component (nullable) is None
        # and model_fields_set contains the field
        if self.component is None and "component" in self.model_fields_set:
            _dict['component'] = None

        # set to None if contextid (nullable) is None
        # and model_fields_set contains the field
        if self.contextid is None and "contextid" in self.model_fields_set:
            _dict['contextid'] = None

        # set to None if ratingarea (nullable) is None
        # and model_fields_set contains the field
        if self.ratingarea is None and "ratingarea" in self.model_fields_set:
            _dict['ratingarea'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModDataGetEntryResponseRatinginfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canviewall": obj.get("canviewall"),
            "canviewany": obj.get("canviewany"),
            "component": obj.get("component"),
            "contextid": obj.get("contextid"),
            "ratingarea": obj.get("ratingarea"),
            "ratings": [ModDataGetEntryResponseRatinginfoRatingsInner.from_dict(_item) for _item in obj["ratings"]] if obj.get("ratings") is not None else None,
            "scales": [ModDataGetEntryResponseRatinginfoScalesInner.from_dict(_item) for _item in obj["scales"]] if obj.get("scales") is not None else None
        })
        return _obj


