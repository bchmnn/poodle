# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.auth_email_get_signup_settings_response_profilefields_inner import AuthEmailGetSignupSettingsResponseProfilefieldsInner
from poodle_async_full.models.auth_email_get_signup_settings_response_warnings_inner import AuthEmailGetSignupSettingsResponseWarningsInner
from typing import Optional, Set
from typing_extensions import Self

class AuthEmailGetSignupSettingsResponse(BaseModel):
    """
    AuthEmailGetSignupSettingsResponse
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="Default country")
    defaultcity: Optional[StrictStr] = Field(default=None, description="Default city")
    extendedusernamechars: Optional[StrictBool] = Field(default=None, description="Extended characters in usernames or not")
    namefields: List[Optional[StrictStr]]
    passwordpolicy: Optional[StrictStr] = Field(default=None, description="Password policy")
    profilefields: Optional[List[AuthEmailGetSignupSettingsResponseProfilefieldsInner]] = Field(default=None, description="Required profile fields")
    recaptchachallengehash: Optional[StrictStr] = Field(default=None, description="Recaptcha challenge hash")
    recaptchachallengeimage: Optional[StrictStr] = Field(default=None, description="Recaptcha challenge noscript image")
    recaptchachallengejs: Optional[StrictStr] = Field(default=None, description="Recaptcha challenge js url")
    recaptchapublickey: Optional[StrictStr] = Field(default=None, description="Recaptcha public key")
    sitepolicy: Optional[StrictStr] = Field(default=None, description="Site policy")
    sitepolicyhandler: Optional[StrictStr] = Field(default=None, description="Site policy handler")
    warnings: Optional[List[AuthEmailGetSignupSettingsResponseWarningsInner]] = Field(default=None, description="list of warnings")
    __properties: ClassVar[List[str]] = ["country", "defaultcity", "extendedusernamechars", "namefields", "passwordpolicy", "profilefields", "recaptchachallengehash", "recaptchachallengeimage", "recaptchachallengejs", "recaptchapublickey", "sitepolicy", "sitepolicyhandler", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthEmailGetSignupSettingsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in profilefields (list)
        _items = []
        if self.profilefields:
            for _item_profilefields in self.profilefields:
                if _item_profilefields:
                    _items.append(_item_profilefields.to_dict())
            _dict['profilefields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if defaultcity (nullable) is None
        # and model_fields_set contains the field
        if self.defaultcity is None and "defaultcity" in self.model_fields_set:
            _dict['defaultcity'] = None

        # set to None if extendedusernamechars (nullable) is None
        # and model_fields_set contains the field
        if self.extendedusernamechars is None and "extendedusernamechars" in self.model_fields_set:
            _dict['extendedusernamechars'] = None

        # set to None if passwordpolicy (nullable) is None
        # and model_fields_set contains the field
        if self.passwordpolicy is None and "passwordpolicy" in self.model_fields_set:
            _dict['passwordpolicy'] = None

        # set to None if recaptchachallengehash (nullable) is None
        # and model_fields_set contains the field
        if self.recaptchachallengehash is None and "recaptchachallengehash" in self.model_fields_set:
            _dict['recaptchachallengehash'] = None

        # set to None if recaptchachallengeimage (nullable) is None
        # and model_fields_set contains the field
        if self.recaptchachallengeimage is None and "recaptchachallengeimage" in self.model_fields_set:
            _dict['recaptchachallengeimage'] = None

        # set to None if recaptchachallengejs (nullable) is None
        # and model_fields_set contains the field
        if self.recaptchachallengejs is None and "recaptchachallengejs" in self.model_fields_set:
            _dict['recaptchachallengejs'] = None

        # set to None if recaptchapublickey (nullable) is None
        # and model_fields_set contains the field
        if self.recaptchapublickey is None and "recaptchapublickey" in self.model_fields_set:
            _dict['recaptchapublickey'] = None

        # set to None if sitepolicy (nullable) is None
        # and model_fields_set contains the field
        if self.sitepolicy is None and "sitepolicy" in self.model_fields_set:
            _dict['sitepolicy'] = None

        # set to None if sitepolicyhandler (nullable) is None
        # and model_fields_set contains the field
        if self.sitepolicyhandler is None and "sitepolicyhandler" in self.model_fields_set:
            _dict['sitepolicyhandler'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthEmailGetSignupSettingsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "defaultcity": obj.get("defaultcity"),
            "extendedusernamechars": obj.get("extendedusernamechars"),
            "namefields": obj.get("namefields"),
            "passwordpolicy": obj.get("passwordpolicy"),
            "profilefields": [AuthEmailGetSignupSettingsResponseProfilefieldsInner.from_dict(_item) for _item in obj["profilefields"]] if obj.get("profilefields") is not None else None,
            "recaptchachallengehash": obj.get("recaptchachallengehash"),
            "recaptchachallengeimage": obj.get("recaptchachallengeimage"),
            "recaptchachallengejs": obj.get("recaptchachallengejs"),
            "recaptchapublickey": obj.get("recaptchapublickey"),
            "sitepolicy": obj.get("sitepolicy"),
            "sitepolicyhandler": obj.get("sitepolicyhandler"),
            "warnings": [AuthEmailGetSignupSettingsResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


