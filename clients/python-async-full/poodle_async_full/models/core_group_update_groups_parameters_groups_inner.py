# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_cohort_create_cohorts_parameters_cohorts_inner_customfields_inner import CoreCohortCreateCohortsParametersCohortsInnerCustomfieldsInner
from typing import Optional, Set
from typing_extensions import Self

class CoreGroupUpdateGroupsParametersGroupsInner(BaseModel):
    """
    CoreGroupUpdateGroupsParametersGroupsInner
    """ # noqa: E501
    customfields: Optional[List[CoreCohortCreateCohortsParametersCohortsInnerCustomfieldsInner]] = Field(default=None, description="Custom fields")
    description: Optional[StrictStr] = Field(default=None, description="group description text")
    descriptionformat: Optional[StrictInt] = Field(default=1, description="description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    enrolmentkey: Optional[StrictStr] = Field(default=None, description="group enrol secret phrase")
    id: Optional[StrictInt] = Field(description="ID of the group")
    idnumber: Optional[StrictStr] = Field(default=None, description="id number")
    name: Optional[StrictStr] = Field(description="multilang compatible name, course unique")
    participation: Optional[StrictBool] = Field(default=None, description="activity participation enabled? Only for \"all\" and \"members\" visibility")
    visibility: Optional[StrictStr] = Field(default=None, description="group visibility mode. 0 = Visible to all. 1 = Visible to members. 2 = See own membership. 3 = Membership is hidden.")
    __properties: ClassVar[List[str]] = ["customfields", "description", "descriptionformat", "enrolmentkey", "id", "idnumber", "name", "participation", "visibility"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreGroupUpdateGroupsParametersGroupsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in customfields (list)
        _items = []
        if self.customfields:
            for _item_customfields in self.customfields:
                if _item_customfields:
                    _items.append(_item_customfields.to_dict())
            _dict['customfields'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if descriptionformat (nullable) is None
        # and model_fields_set contains the field
        if self.descriptionformat is None and "descriptionformat" in self.model_fields_set:
            _dict['descriptionformat'] = None

        # set to None if enrolmentkey (nullable) is None
        # and model_fields_set contains the field
        if self.enrolmentkey is None and "enrolmentkey" in self.model_fields_set:
            _dict['enrolmentkey'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if idnumber (nullable) is None
        # and model_fields_set contains the field
        if self.idnumber is None and "idnumber" in self.model_fields_set:
            _dict['idnumber'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if participation (nullable) is None
        # and model_fields_set contains the field
        if self.participation is None and "participation" in self.model_fields_set:
            _dict['participation'] = None

        # set to None if visibility (nullable) is None
        # and model_fields_set contains the field
        if self.visibility is None and "visibility" in self.model_fields_set:
            _dict['visibility'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreGroupUpdateGroupsParametersGroupsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customfields": [CoreCohortCreateCohortsParametersCohortsInnerCustomfieldsInner.from_dict(_item) for _item in obj["customfields"]] if obj.get("customfields") is not None else None,
            "description": obj.get("description"),
            "descriptionformat": obj.get("descriptionformat") if obj.get("descriptionformat") is not None else 1,
            "enrolmentkey": obj.get("enrolmentkey"),
            "id": obj.get("id"),
            "idnumber": obj.get("idnumber"),
            "name": obj.get("name"),
            "participation": obj.get("participation"),
            "visibility": obj.get("visibility")
        })
        return _obj


