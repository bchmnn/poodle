# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModLtiGetToolProxiesResponseInner(BaseModel):
    """
    ModLtiGetToolProxiesResponseInner
    """ # noqa: E501
    capabilityoffered: Optional[StrictStr] = Field(description="Tool proxy capabilities offered")
    guid: Optional[StrictStr] = Field(description="Tool proxy globally unique identifier")
    id: Optional[StrictInt] = Field(description="Tool proxy id")
    name: Optional[StrictStr] = Field(description="Tool proxy name")
    regurl: Optional[StrictStr] = Field(description="Tool proxy registration URL")
    secret: Optional[StrictStr] = Field(description="Tool proxy shared secret")
    serviceoffered: Optional[StrictStr] = Field(description="Tool proxy services offered")
    state: Optional[StrictInt] = Field(description="Tool proxy state")
    timecreated: Optional[StrictInt] = Field(description="Tool proxy time created")
    timemodified: Optional[StrictInt] = Field(description="Tool proxy modified")
    toolproxy: Optional[StrictStr] = Field(description="Tool proxy")
    vendorcode: Optional[StrictStr] = Field(description="Tool proxy consumer code")
    __properties: ClassVar[List[str]] = ["capabilityoffered", "guid", "id", "name", "regurl", "secret", "serviceoffered", "state", "timecreated", "timemodified", "toolproxy", "vendorcode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModLtiGetToolProxiesResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if capabilityoffered (nullable) is None
        # and model_fields_set contains the field
        if self.capabilityoffered is None and "capabilityoffered" in self.model_fields_set:
            _dict['capabilityoffered'] = None

        # set to None if guid (nullable) is None
        # and model_fields_set contains the field
        if self.guid is None and "guid" in self.model_fields_set:
            _dict['guid'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if regurl (nullable) is None
        # and model_fields_set contains the field
        if self.regurl is None and "regurl" in self.model_fields_set:
            _dict['regurl'] = None

        # set to None if secret (nullable) is None
        # and model_fields_set contains the field
        if self.secret is None and "secret" in self.model_fields_set:
            _dict['secret'] = None

        # set to None if serviceoffered (nullable) is None
        # and model_fields_set contains the field
        if self.serviceoffered is None and "serviceoffered" in self.model_fields_set:
            _dict['serviceoffered'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if timecreated (nullable) is None
        # and model_fields_set contains the field
        if self.timecreated is None and "timecreated" in self.model_fields_set:
            _dict['timecreated'] = None

        # set to None if timemodified (nullable) is None
        # and model_fields_set contains the field
        if self.timemodified is None and "timemodified" in self.model_fields_set:
            _dict['timemodified'] = None

        # set to None if toolproxy (nullable) is None
        # and model_fields_set contains the field
        if self.toolproxy is None and "toolproxy" in self.model_fields_set:
            _dict['toolproxy'] = None

        # set to None if vendorcode (nullable) is None
        # and model_fields_set contains the field
        if self.vendorcode is None and "vendorcode" in self.model_fields_set:
            _dict['vendorcode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModLtiGetToolProxiesResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilityoffered": obj.get("capabilityoffered"),
            "guid": obj.get("guid"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "regurl": obj.get("regurl"),
            "secret": obj.get("secret"),
            "serviceoffered": obj.get("serviceoffered"),
            "state": obj.get("state"),
            "timecreated": obj.get("timecreated"),
            "timemodified": obj.get("timemodified"),
            "toolproxy": obj.get("toolproxy"),
            "vendorcode": obj.get("vendorcode")
        })
        return _obj


