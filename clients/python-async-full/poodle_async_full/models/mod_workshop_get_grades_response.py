# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from poodle_async_full.models.auth_email_get_signup_settings_response_warnings_inner import AuthEmailGetSignupSettingsResponseWarningsInner
from typing import Optional, Set
from typing_extensions import Self

class ModWorkshopGetGradesResponse(BaseModel):
    """
    ModWorkshopGetGradesResponse
    """ # noqa: E501
    assessmentgradehidden: Optional[StrictBool] = Field(default=None, description="Whether the grade is hidden or not.")
    assessmentlongstrgrade: Optional[StrictStr] = Field(default=None, description="The assessment string grade.")
    assessmentrawgrade: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The assessment raw (numeric) grade.")
    submissiongradehidden: Optional[StrictBool] = Field(default=None, description="Whether the grade is hidden or not.")
    submissionlongstrgrade: Optional[StrictStr] = Field(default=None, description="The submission string grade.")
    submissionrawgrade: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The submission raw (numeric) grade.")
    warnings: Optional[List[AuthEmailGetSignupSettingsResponseWarningsInner]] = Field(default=None, description="list of warnings")
    __properties: ClassVar[List[str]] = ["assessmentgradehidden", "assessmentlongstrgrade", "assessmentrawgrade", "submissiongradehidden", "submissionlongstrgrade", "submissionrawgrade", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModWorkshopGetGradesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # set to None if assessmentgradehidden (nullable) is None
        # and model_fields_set contains the field
        if self.assessmentgradehidden is None and "assessmentgradehidden" in self.model_fields_set:
            _dict['assessmentgradehidden'] = None

        # set to None if assessmentlongstrgrade (nullable) is None
        # and model_fields_set contains the field
        if self.assessmentlongstrgrade is None and "assessmentlongstrgrade" in self.model_fields_set:
            _dict['assessmentlongstrgrade'] = None

        # set to None if assessmentrawgrade (nullable) is None
        # and model_fields_set contains the field
        if self.assessmentrawgrade is None and "assessmentrawgrade" in self.model_fields_set:
            _dict['assessmentrawgrade'] = None

        # set to None if submissiongradehidden (nullable) is None
        # and model_fields_set contains the field
        if self.submissiongradehidden is None and "submissiongradehidden" in self.model_fields_set:
            _dict['submissiongradehidden'] = None

        # set to None if submissionlongstrgrade (nullable) is None
        # and model_fields_set contains the field
        if self.submissionlongstrgrade is None and "submissionlongstrgrade" in self.model_fields_set:
            _dict['submissionlongstrgrade'] = None

        # set to None if submissionrawgrade (nullable) is None
        # and model_fields_set contains the field
        if self.submissionrawgrade is None and "submissionrawgrade" in self.model_fields_set:
            _dict['submissionrawgrade'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModWorkshopGetGradesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assessmentgradehidden": obj.get("assessmentgradehidden"),
            "assessmentlongstrgrade": obj.get("assessmentlongstrgrade"),
            "assessmentrawgrade": obj.get("assessmentrawgrade"),
            "submissiongradehidden": obj.get("submissiongradehidden"),
            "submissionlongstrgrade": obj.get("submissionlongstrgrade"),
            "submissionrawgrade": obj.get("submissionrawgrade"),
            "warnings": [AuthEmailGetSignupSettingsResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


