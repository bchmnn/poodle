# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_block_get_course_blocks_response_blocks_inner_configs_inner import CoreBlockGetCourseBlocksResponseBlocksInnerConfigsInner
from poodle_async_full.models.core_block_get_course_blocks_response_blocks_inner_contents import CoreBlockGetCourseBlocksResponseBlocksInnerContents
from typing import Optional, Set
from typing_extensions import Self

class CoreBlockGetCourseBlocksResponseBlocksInner(BaseModel):
    """
    Block information.
    """ # noqa: E501
    collapsible: Optional[StrictBool] = Field(description="Whether the block is collapsible.")
    configs: Optional[List[CoreBlockGetCourseBlocksResponseBlocksInnerConfigsInner]] = Field(default=None, description="Block instance and plugin configuration settings.")
    contents: Optional[CoreBlockGetCourseBlocksResponseBlocksInnerContents] = None
    dockable: Optional[StrictBool] = Field(description="Whether the block is dockable.")
    instanceid: Optional[StrictInt] = Field(description="Block instance id.")
    name: Optional[StrictStr] = Field(description="Block name.")
    positionid: Optional[StrictInt] = Field(description="Position id.")
    region: Optional[StrictStr] = Field(description="Block region.")
    visible: Optional[StrictBool] = Field(default=None, description="Whether the block is visible.")
    weight: Optional[StrictInt] = Field(default=None, description="Used to order blocks within a region.")
    __properties: ClassVar[List[str]] = ["collapsible", "configs", "contents", "dockable", "instanceid", "name", "positionid", "region", "visible", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreBlockGetCourseBlocksResponseBlocksInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in configs (list)
        _items = []
        if self.configs:
            for _item_configs in self.configs:
                if _item_configs:
                    _items.append(_item_configs.to_dict())
            _dict['configs'] = _items
        # override the default output from pydantic by calling `to_dict()` of contents
        if self.contents:
            _dict['contents'] = self.contents.to_dict()
        # set to None if collapsible (nullable) is None
        # and model_fields_set contains the field
        if self.collapsible is None and "collapsible" in self.model_fields_set:
            _dict['collapsible'] = None

        # set to None if dockable (nullable) is None
        # and model_fields_set contains the field
        if self.dockable is None and "dockable" in self.model_fields_set:
            _dict['dockable'] = None

        # set to None if instanceid (nullable) is None
        # and model_fields_set contains the field
        if self.instanceid is None and "instanceid" in self.model_fields_set:
            _dict['instanceid'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if positionid (nullable) is None
        # and model_fields_set contains the field
        if self.positionid is None and "positionid" in self.model_fields_set:
            _dict['positionid'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        # set to None if visible (nullable) is None
        # and model_fields_set contains the field
        if self.visible is None and "visible" in self.model_fields_set:
            _dict['visible'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreBlockGetCourseBlocksResponseBlocksInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collapsible": obj.get("collapsible"),
            "configs": [CoreBlockGetCourseBlocksResponseBlocksInnerConfigsInner.from_dict(_item) for _item in obj["configs"]] if obj.get("configs") is not None else None,
            "contents": CoreBlockGetCourseBlocksResponseBlocksInnerContents.from_dict(obj["contents"]) if obj.get("contents") is not None else None,
            "dockable": obj.get("dockable"),
            "instanceid": obj.get("instanceid"),
            "name": obj.get("name"),
            "positionid": obj.get("positionid"),
            "region": obj.get("region"),
            "visible": obj.get("visible"),
            "weight": obj.get("weight")
        })
        return _obj


