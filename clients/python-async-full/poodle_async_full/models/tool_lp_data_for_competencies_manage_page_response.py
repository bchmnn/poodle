# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_competency_list_competency_frameworks_response_inner import CoreCompetencyListCompetencyFrameworksResponseInner
from typing import Optional, Set
from typing_extensions import Self

class ToolLpDataForCompetenciesManagePageResponse(BaseModel):
    """
    ToolLpDataForCompetenciesManagePageResponse
    """ # noqa: E501
    canmanage: Optional[StrictBool] = Field(description="True if this user has permission to manage competency frameworks")
    framework: CoreCompetencyListCompetencyFrameworksResponseInner
    pagecontextid: Optional[StrictInt] = Field(description="Context id for the framework")
    pluginbaseurl: Optional[StrictStr] = Field(description="Plugin base url")
    rulesmodules: Optional[StrictStr] = Field(description="JSON encoded data for rules")
    search: Optional[StrictStr] = Field(description="Current search string")
    __properties: ClassVar[List[str]] = ["canmanage", "framework", "pagecontextid", "pluginbaseurl", "rulesmodules", "search"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolLpDataForCompetenciesManagePageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of framework
        if self.framework:
            _dict['framework'] = self.framework.to_dict()
        # set to None if canmanage (nullable) is None
        # and model_fields_set contains the field
        if self.canmanage is None and "canmanage" in self.model_fields_set:
            _dict['canmanage'] = None

        # set to None if pagecontextid (nullable) is None
        # and model_fields_set contains the field
        if self.pagecontextid is None and "pagecontextid" in self.model_fields_set:
            _dict['pagecontextid'] = None

        # set to None if pluginbaseurl (nullable) is None
        # and model_fields_set contains the field
        if self.pluginbaseurl is None and "pluginbaseurl" in self.model_fields_set:
            _dict['pluginbaseurl'] = None

        # set to None if rulesmodules (nullable) is None
        # and model_fields_set contains the field
        if self.rulesmodules is None and "rulesmodules" in self.model_fields_set:
            _dict['rulesmodules'] = None

        # set to None if search (nullable) is None
        # and model_fields_set contains the field
        if self.search is None and "search" in self.model_fields_set:
            _dict['search'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolLpDataForCompetenciesManagePageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canmanage": obj.get("canmanage"),
            "framework": CoreCompetencyListCompetencyFrameworksResponseInner.from_dict(obj["framework"]) if obj.get("framework") is not None else None,
            "pagecontextid": obj.get("pagecontextid"),
            "pluginbaseurl": obj.get("pluginbaseurl"),
            "rulesmodules": obj.get("rulesmodules"),
            "search": obj.get("search")
        })
        return _obj


