# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BlockRecentlyaccesseditemsGetRecentItemsResponseInner(BaseModel):
    """
    BlockRecentlyaccesseditemsGetRecentItemsResponseInner
    """ # noqa: E501
    branded: Optional[StrictBool] = Field(default=False, description="branded")
    cmid: StrictInt = Field(description="cmid")
    courseid: StrictInt = Field(description="courseid")
    coursename: StrictStr = Field(description="coursename")
    courseviewurl: StrictStr = Field(description="courseviewurl")
    icon: StrictStr = Field(description="icon")
    id: StrictInt = Field(description="id")
    modname: StrictStr = Field(description="modname")
    name: StrictStr = Field(description="name")
    purpose: StrictStr = Field(description="purpose")
    timeaccess: StrictInt = Field(description="timeaccess")
    userid: StrictInt = Field(description="userid")
    viewurl: StrictStr = Field(description="viewurl")
    __properties: ClassVar[List[str]] = ["branded", "cmid", "courseid", "coursename", "courseviewurl", "icon", "id", "modname", "name", "purpose", "timeaccess", "userid", "viewurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlockRecentlyaccesseditemsGetRecentItemsResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlockRecentlyaccesseditemsGetRecentItemsResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branded": obj.get("branded") if obj.get("branded") is not None else False,
            "cmid": obj.get("cmid") if obj.get("cmid") is not None else 0,
            "courseid": obj.get("courseid") if obj.get("courseid") is not None else 0,
            "coursename": obj.get("coursename") if obj.get("coursename") is not None else '',
            "courseviewurl": obj.get("courseviewurl") if obj.get("courseviewurl") is not None else '',
            "icon": obj.get("icon") if obj.get("icon") is not None else '',
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "modname": obj.get("modname") if obj.get("modname") is not None else '',
            "name": obj.get("name") if obj.get("name") is not None else '',
            "purpose": obj.get("purpose") if obj.get("purpose") is not None else '',
            "timeaccess": obj.get("timeaccess") if obj.get("timeaccess") is not None else 0,
            "userid": obj.get("userid") if obj.get("userid") is not None else 0,
            "viewurl": obj.get("viewurl") if obj.get("viewurl") is not None else ''
        })
        return _obj


