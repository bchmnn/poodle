# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModAssignGetGradesResponseAssignmentsInnerGradesInner(BaseModel):
    """
    grade information
    """ # noqa: E501
    assignment: Optional[StrictInt] = Field(default=None, description="assignment id")
    attemptnumber: Optional[StrictInt] = Field(description="attempt number")
    grade: Optional[StrictStr] = Field(description="grade")
    gradefordisplay: Optional[StrictStr] = Field(default=None, description="grade rendered into a format suitable for display")
    grader: Optional[StrictInt] = Field(description="grader, -1 if grader is hidden")
    id: Optional[StrictInt] = Field(description="grade id")
    timecreated: Optional[StrictInt] = Field(description="grade creation time")
    timemodified: Optional[StrictInt] = Field(description="grade last modified time")
    userid: Optional[StrictInt] = Field(description="student id")
    __properties: ClassVar[List[str]] = ["assignment", "attemptnumber", "grade", "gradefordisplay", "grader", "id", "timecreated", "timemodified", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModAssignGetGradesResponseAssignmentsInnerGradesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if assignment (nullable) is None
        # and model_fields_set contains the field
        if self.assignment is None and "assignment" in self.model_fields_set:
            _dict['assignment'] = None

        # set to None if attemptnumber (nullable) is None
        # and model_fields_set contains the field
        if self.attemptnumber is None and "attemptnumber" in self.model_fields_set:
            _dict['attemptnumber'] = None

        # set to None if grade (nullable) is None
        # and model_fields_set contains the field
        if self.grade is None and "grade" in self.model_fields_set:
            _dict['grade'] = None

        # set to None if gradefordisplay (nullable) is None
        # and model_fields_set contains the field
        if self.gradefordisplay is None and "gradefordisplay" in self.model_fields_set:
            _dict['gradefordisplay'] = None

        # set to None if grader (nullable) is None
        # and model_fields_set contains the field
        if self.grader is None and "grader" in self.model_fields_set:
            _dict['grader'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if timecreated (nullable) is None
        # and model_fields_set contains the field
        if self.timecreated is None and "timecreated" in self.model_fields_set:
            _dict['timecreated'] = None

        # set to None if timemodified (nullable) is None
        # and model_fields_set contains the field
        if self.timemodified is None and "timemodified" in self.model_fields_set:
            _dict['timemodified'] = None

        # set to None if userid (nullable) is None
        # and model_fields_set contains the field
        if self.userid is None and "userid" in self.model_fields_set:
            _dict['userid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModAssignGetGradesResponseAssignmentsInnerGradesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignment": obj.get("assignment"),
            "attemptnumber": obj.get("attemptnumber"),
            "grade": obj.get("grade"),
            "gradefordisplay": obj.get("gradefordisplay"),
            "grader": obj.get("grader"),
            "id": obj.get("id"),
            "timecreated": obj.get("timecreated"),
            "timemodified": obj.get("timemodified"),
            "userid": obj.get("userid")
        })
        return _obj


