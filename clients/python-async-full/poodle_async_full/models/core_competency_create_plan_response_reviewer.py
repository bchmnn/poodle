# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class CoreCompetencyCreatePlanResponseReviewer(BaseModel):
    """
    CoreCompetencyCreatePlanResponseReviewer
    """ # noqa: E501
    department: StrictStr = Field(description="department")
    email: StrictStr = Field(description="email")
    fullname: StrictStr = Field(description="fullname")
    id: StrictInt = Field(description="id")
    identity: StrictStr = Field(description="identity")
    idnumber: StrictStr = Field(description="idnumber")
    institution: StrictStr = Field(description="institution")
    phone1: StrictStr = Field(description="phone1")
    phone2: StrictStr = Field(description="phone2")
    profileimageurl: StrictStr = Field(description="profileimageurl")
    profileimageurlsmall: StrictStr = Field(description="profileimageurlsmall")
    profileurl: StrictStr = Field(description="profileurl")
    __properties: ClassVar[List[str]] = ["department", "email", "fullname", "id", "identity", "idnumber", "institution", "phone1", "phone2", "profileimageurl", "profileimageurlsmall", "profileurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCompetencyCreatePlanResponseReviewer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCompetencyCreatePlanResponseReviewer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "department": obj.get("department") if obj.get("department") is not None else '',
            "email": obj.get("email") if obj.get("email") is not None else '',
            "fullname": obj.get("fullname") if obj.get("fullname") is not None else '',
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "identity": obj.get("identity") if obj.get("identity") is not None else '',
            "idnumber": obj.get("idnumber") if obj.get("idnumber") is not None else '',
            "institution": obj.get("institution") if obj.get("institution") is not None else '',
            "phone1": obj.get("phone1") if obj.get("phone1") is not None else '',
            "phone2": obj.get("phone2") if obj.get("phone2") is not None else '',
            "profileimageurl": obj.get("profileimageurl") if obj.get("profileimageurl") is not None else '',
            "profileimageurlsmall": obj.get("profileimageurlsmall") if obj.get("profileimageurlsmall") is not None else '',
            "profileurl": obj.get("profileurl") if obj.get("profileurl") is not None else ''
        })
        return _obj


