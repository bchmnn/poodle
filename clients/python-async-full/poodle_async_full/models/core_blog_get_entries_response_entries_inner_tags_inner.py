# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreBlogGetEntriesResponseEntriesInnerTagsInner(BaseModel):
    """
    CoreBlogGetEntriesResponseEntriesInnerTagsInner
    """ # noqa: E501
    flag: Optional[StrictInt] = Field(description="Whether the tag is flagged as inappropriate.")
    id: StrictInt = Field(description="Tag id.")
    isstandard: StrictBool = Field(description="Whether this tag is standard.")
    itemid: StrictInt = Field(description="Id of the record tagged.")
    name: StrictStr = Field(description="Tag name.")
    ordering: StrictInt = Field(description="Tag ordering.")
    rawname: StrictStr = Field(description="The raw, unnormalised name for the tag as entered by users.")
    tagcollid: StrictInt = Field(description="Tag collection id.")
    taginstancecontextid: StrictInt = Field(description="Context the tag instance belongs to.")
    taginstanceid: StrictInt = Field(description="Tag instance id.")
    viewurl: Optional[StrictStr] = Field(default=None, description="The url to view the tag.")
    __properties: ClassVar[List[str]] = ["flag", "id", "isstandard", "itemid", "name", "ordering", "rawname", "tagcollid", "taginstancecontextid", "taginstanceid", "viewurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreBlogGetEntriesResponseEntriesInnerTagsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if flag (nullable) is None
        # and model_fields_set contains the field
        if self.flag is None and "flag" in self.model_fields_set:
            _dict['flag'] = None

        # set to None if viewurl (nullable) is None
        # and model_fields_set contains the field
        if self.viewurl is None and "viewurl" in self.model_fields_set:
            _dict['viewurl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreBlogGetEntriesResponseEntriesInnerTagsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flag": obj.get("flag") if obj.get("flag") is not None else 0,
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "isstandard": obj.get("isstandard") if obj.get("isstandard") is not None else False,
            "itemid": obj.get("itemid") if obj.get("itemid") is not None else 0,
            "name": obj.get("name") if obj.get("name") is not None else '',
            "ordering": obj.get("ordering") if obj.get("ordering") is not None else 0,
            "rawname": obj.get("rawname") if obj.get("rawname") is not None else '',
            "tagcollid": obj.get("tagcollid") if obj.get("tagcollid") is not None else 0,
            "taginstancecontextid": obj.get("taginstancecontextid") if obj.get("taginstancecontextid") is not None else 0,
            "taginstanceid": obj.get("taginstanceid") if obj.get("taginstanceid") is not None else 0,
            "viewurl": obj.get("viewurl")
        })
        return _obj


