# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5.6 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_update_inplace_editable_response_editicon import CoreUpdateInplaceEditableResponseEditicon
from typing import Optional, Set
from typing_extensions import Self

class CoreUpdateInplaceEditableResponse(BaseModel):
    """
    CoreUpdateInplaceEditableResponse
    """ # noqa: E501
    component: Optional[StrictStr] = Field(default=None, description="component responsible for the update")
    displayvalue: Optional[StrictStr] = Field(description="display value (may contain link or other html tags)")
    edithint: Optional[StrictStr] = Field(default=None, description="hint for editing element")
    editicon: Optional[CoreUpdateInplaceEditableResponseEditicon] = None
    editlabel: Optional[StrictStr] = Field(default=None, description="label for editing element")
    itemid: Optional[StrictStr] = Field(default=None, description="identifier of the updated item")
    itemtype: Optional[StrictStr] = Field(default=None, description="itemtype")
    linkeverything: Optional[StrictInt] = Field(default=None, description="Should everything be wrapped in the edit link or link displayed separately")
    options: Optional[StrictStr] = Field(default=None, description="options of the element, format depends on type")
    type: Optional[StrictStr] = Field(default=None, description="type of the element (text, toggle, select)")
    value: Optional[StrictStr] = Field(default=None, description="value of the item as it is stored")
    __properties: ClassVar[List[str]] = ["component", "displayvalue", "edithint", "editicon", "editlabel", "itemid", "itemtype", "linkeverything", "options", "type", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreUpdateInplaceEditableResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of editicon
        if self.editicon:
            _dict['editicon'] = self.editicon.to_dict()
        # set to None if component (nullable) is None
        # and model_fields_set contains the field
        if self.component is None and "component" in self.model_fields_set:
            _dict['component'] = None

        # set to None if displayvalue (nullable) is None
        # and model_fields_set contains the field
        if self.displayvalue is None and "displayvalue" in self.model_fields_set:
            _dict['displayvalue'] = None

        # set to None if edithint (nullable) is None
        # and model_fields_set contains the field
        if self.edithint is None and "edithint" in self.model_fields_set:
            _dict['edithint'] = None

        # set to None if editlabel (nullable) is None
        # and model_fields_set contains the field
        if self.editlabel is None and "editlabel" in self.model_fields_set:
            _dict['editlabel'] = None

        # set to None if itemid (nullable) is None
        # and model_fields_set contains the field
        if self.itemid is None and "itemid" in self.model_fields_set:
            _dict['itemid'] = None

        # set to None if itemtype (nullable) is None
        # and model_fields_set contains the field
        if self.itemtype is None and "itemtype" in self.model_fields_set:
            _dict['itemtype'] = None

        # set to None if linkeverything (nullable) is None
        # and model_fields_set contains the field
        if self.linkeverything is None and "linkeverything" in self.model_fields_set:
            _dict['linkeverything'] = None

        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict['options'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreUpdateInplaceEditableResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "component": obj.get("component"),
            "displayvalue": obj.get("displayvalue"),
            "edithint": obj.get("edithint"),
            "editicon": CoreUpdateInplaceEditableResponseEditicon.from_dict(obj["editicon"]) if obj.get("editicon") is not None else None,
            "editlabel": obj.get("editlabel"),
            "itemid": obj.get("itemid"),
            "itemtype": obj.get("itemtype"),
            "linkeverything": obj.get("linkeverything"),
            "options": obj.get("options"),
            "type": obj.get("type"),
            "value": obj.get("value")
        })
        return _obj


