# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 5.0.2 (Build: 20250811)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreCalendarGetActionEventsByCourseResponseEventsInnerCategory(BaseModel):
    """
    CoreCalendarGetActionEventsByCourseResponseEventsInnerCategory
    """ # noqa: E501
    coursecount: StrictInt = Field(description="coursecount")
    depth: StrictInt = Field(description="depth")
    description: Optional[StrictStr] = Field(default='', description="description")
    id: StrictInt = Field(description="id")
    idnumber: Optional[StrictStr] = Field(description="idnumber")
    name: StrictStr = Field(description="name")
    nestedname: StrictStr = Field(description="nestedname")
    parent: StrictInt = Field(description="parent")
    timemodified: StrictInt = Field(description="timemodified")
    url: StrictStr = Field(description="url")
    visible: StrictInt = Field(description="visible")
    __properties: ClassVar[List[str]] = ["coursecount", "depth", "description", "id", "idnumber", "name", "nestedname", "parent", "timemodified", "url", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCalendarGetActionEventsByCourseResponseEventsInnerCategory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if idnumber (nullable) is None
        # and model_fields_set contains the field
        if self.idnumber is None and "idnumber" in self.model_fields_set:
            _dict['idnumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCalendarGetActionEventsByCourseResponseEventsInnerCategory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coursecount": obj.get("coursecount") if obj.get("coursecount") is not None else 0,
            "depth": obj.get("depth") if obj.get("depth") is not None else 0,
            "description": obj.get("description") if obj.get("description") is not None else '',
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "idnumber": obj.get("idnumber"),
            "name": obj.get("name") if obj.get("name") is not None else '',
            "nestedname": obj.get("nestedname") if obj.get("nestedname") is not None else '',
            "parent": obj.get("parent") if obj.get("parent") is not None else 0,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else 0,
            "url": obj.get("url") if obj.get("url") is not None else '',
            "visible": obj.get("visible") if obj.get("visible") is not None else 0
        })
        return _obj


