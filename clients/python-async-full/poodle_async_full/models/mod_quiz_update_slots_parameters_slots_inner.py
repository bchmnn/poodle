# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ModQuizUpdateSlotsParametersSlotsInner(BaseModel):
    """
    ModQuizUpdateSlotsParametersSlotsInner
    """ # noqa: E501
    displaynumber: Optional[StrictStr] = Field(default=None, description="If passed, new customised question number. Empty string to clear customisation. Null, or not specified, to leave unchanged.")
    id: Optional[StrictInt] = Field(description="id of the slot")
    maxmark: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mark that this questions is out of. Null, or not specified, to leave unchanged.")
    quizgradeitemid: Optional[StrictInt] = Field(default=None, description="For quizzes with multiple grades, which grade this slot contributes to (quiz_grade_id). 0 to set to nothing. Null, or not specified, to leave unchanged.")
    requireprevious: Optional[StrictBool] = Field(default=None, description="Whether to make this slot dependent on the previous one. Null, or not specified, to leave unchanged.")
    __properties: ClassVar[List[str]] = ["displaynumber", "id", "maxmark", "quizgradeitemid", "requireprevious"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModQuizUpdateSlotsParametersSlotsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if displaynumber (nullable) is None
        # and model_fields_set contains the field
        if self.displaynumber is None and "displaynumber" in self.model_fields_set:
            _dict['displaynumber'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if maxmark (nullable) is None
        # and model_fields_set contains the field
        if self.maxmark is None and "maxmark" in self.model_fields_set:
            _dict['maxmark'] = None

        # set to None if quizgradeitemid (nullable) is None
        # and model_fields_set contains the field
        if self.quizgradeitemid is None and "quizgradeitemid" in self.model_fields_set:
            _dict['quizgradeitemid'] = None

        # set to None if requireprevious (nullable) is None
        # and model_fields_set contains the field
        if self.requireprevious is None and "requireprevious" in self.model_fields_set:
            _dict['requireprevious'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModQuizUpdateSlotsParametersSlotsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displaynumber": obj.get("displaynumber"),
            "id": obj.get("id"),
            "maxmark": obj.get("maxmark"),
            "quizgradeitemid": obj.get("quizgradeitemid"),
            "requireprevious": obj.get("requireprevious")
        })
        return _obj


