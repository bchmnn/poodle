# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.core_badges_get_badge_response_badge_alignment_inner import CoreBadgesGetBadgeResponseBadgeAlignmentInner
from typing import Optional, Set
from typing_extensions import Self

class CoreBadgesGetBadgeResponseBadge(BaseModel):
    """
    CoreBadgesGetBadgeResponseBadge
    """ # noqa: E501
    alignment: Optional[List[CoreBadgesGetBadgeResponseBadgeAlignmentInner]] = Field(default=None, description="alignment")
    criteria_narrative: Optional[StrictStr] = Field(default='', description="criteriaNarrative", alias="criteriaNarrative")
    criteria_url: Optional[StrictStr] = Field(default='', description="criteriaUrl", alias="criteriaUrl")
    description: StrictStr = Field(description="Description of the badge class.")
    hosted_url: Optional[StrictStr] = Field(default='', description="Identifier of the open badge for this assertion", alias="hostedUrl")
    id: StrictStr = Field(description="Unique identifier for this badgeclass")
    image: StrictStr = Field(description="URL to the image.")
    issuer: Optional[StrictStr] = Field(default='', description="Unique identifier for this badgeclass")
    name: StrictStr = Field(description="Name of the badgeclass")
    type: StrictStr = Field(description="BadgeClass")
    __properties: ClassVar[List[str]] = ["alignment", "criteriaNarrative", "criteriaUrl", "description", "hostedUrl", "id", "image", "issuer", "name", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreBadgesGetBadgeResponseBadge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alignment (list)
        _items = []
        if self.alignment:
            for _item_alignment in self.alignment:
                if _item_alignment:
                    _items.append(_item_alignment.to_dict())
            _dict['alignment'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreBadgesGetBadgeResponseBadge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alignment": [CoreBadgesGetBadgeResponseBadgeAlignmentInner.from_dict(_item) for _item in obj["alignment"]] if obj.get("alignment") is not None else None,
            "criteriaNarrative": obj.get("criteriaNarrative") if obj.get("criteriaNarrative") is not None else '',
            "criteriaUrl": obj.get("criteriaUrl") if obj.get("criteriaUrl") is not None else '',
            "description": obj.get("description") if obj.get("description") is not None else '',
            "hostedUrl": obj.get("hostedUrl") if obj.get("hostedUrl") is not None else '',
            "id": obj.get("id") if obj.get("id") is not None else '',
            "image": obj.get("image") if obj.get("image") is not None else '',
            "issuer": obj.get("issuer") if obj.get("issuer") is not None else '',
            "name": obj.get("name") if obj.get("name") is not None else '',
            "type": obj.get("type") if obj.get("type") is not None else ''
        })
        return _obj


