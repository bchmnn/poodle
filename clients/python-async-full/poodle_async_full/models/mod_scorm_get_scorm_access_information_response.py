# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from poodle_async_full.models.auth_email_get_signup_settings_response_warnings_inner import AuthEmailGetSignupSettingsResponseWarningsInner
from typing import Optional, Set
from typing_extensions import Self

class ModScormGetScormAccessInformationResponse(BaseModel):
    """
    ModScormGetScormAccessInformationResponse
    """ # noqa: E501
    canaddinstance: Optional[StrictBool] = Field(default=None, description="Whether the user has the capability mod/scorm:addinstance allowed.")
    candeleteownresponses: Optional[StrictBool] = Field(default=None, description="Whether the user has the capability mod/scorm:deleteownresponses allowed.")
    candeleteresponses: Optional[StrictBool] = Field(default=None, description="Whether the user has the capability mod/scorm:deleteresponses allowed.")
    cansavetrack: Optional[StrictBool] = Field(default=None, description="Whether the user has the capability mod/scorm:savetrack allowed.")
    canskipview: Optional[StrictBool] = Field(default=None, description="Whether the user has the capability mod/scorm:skipview allowed.")
    canviewreport: Optional[StrictBool] = Field(default=None, description="Whether the user has the capability mod/scorm:viewreport allowed.")
    canviewscores: Optional[StrictBool] = Field(default=None, description="Whether the user has the capability mod/scorm:viewscores allowed.")
    warnings: Optional[List[AuthEmailGetSignupSettingsResponseWarningsInner]] = Field(default=None, description="list of warnings")
    __properties: ClassVar[List[str]] = ["canaddinstance", "candeleteownresponses", "candeleteresponses", "cansavetrack", "canskipview", "canviewreport", "canviewscores", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModScormGetScormAccessInformationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # set to None if canaddinstance (nullable) is None
        # and model_fields_set contains the field
        if self.canaddinstance is None and "canaddinstance" in self.model_fields_set:
            _dict['canaddinstance'] = None

        # set to None if candeleteownresponses (nullable) is None
        # and model_fields_set contains the field
        if self.candeleteownresponses is None and "candeleteownresponses" in self.model_fields_set:
            _dict['candeleteownresponses'] = None

        # set to None if candeleteresponses (nullable) is None
        # and model_fields_set contains the field
        if self.candeleteresponses is None and "candeleteresponses" in self.model_fields_set:
            _dict['candeleteresponses'] = None

        # set to None if cansavetrack (nullable) is None
        # and model_fields_set contains the field
        if self.cansavetrack is None and "cansavetrack" in self.model_fields_set:
            _dict['cansavetrack'] = None

        # set to None if canskipview (nullable) is None
        # and model_fields_set contains the field
        if self.canskipview is None and "canskipview" in self.model_fields_set:
            _dict['canskipview'] = None

        # set to None if canviewreport (nullable) is None
        # and model_fields_set contains the field
        if self.canviewreport is None and "canviewreport" in self.model_fields_set:
            _dict['canviewreport'] = None

        # set to None if canviewscores (nullable) is None
        # and model_fields_set contains the field
        if self.canviewscores is None and "canviewscores" in self.model_fields_set:
            _dict['canviewscores'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModScormGetScormAccessInformationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canaddinstance": obj.get("canaddinstance"),
            "candeleteownresponses": obj.get("candeleteownresponses"),
            "candeleteresponses": obj.get("candeleteresponses"),
            "cansavetrack": obj.get("cansavetrack"),
            "canskipview": obj.get("canskipview"),
            "canviewreport": obj.get("canviewreport"),
            "canviewscores": obj.get("canviewscores"),
            "warnings": [AuthEmailGetSignupSettingsResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


