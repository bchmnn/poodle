# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreEnrolGetUsersCoursesResponseInnerOverviewfilesInner(BaseModel):
    """
    File.
    """ # noqa: E501
    filename: Optional[StrictStr] = Field(default=None, description="File name.")
    filepath: Optional[StrictStr] = Field(default=None, description="File path.")
    filesize: Optional[StrictInt] = Field(default=None, description="File size.")
    fileurl: Optional[StrictStr] = Field(default=None, description="Downloadable file url.")
    icon: Optional[StrictStr] = Field(default=None, description="The relative path to the relevant file type icon based on the file's mime type.")
    isexternalfile: Optional[StrictBool] = Field(default=None, description="Whether is an external file.")
    mimetype: Optional[StrictStr] = Field(default=None, description="File mime type.")
    repositorytype: Optional[StrictStr] = Field(default=None, description="The repository type for external files.")
    timemodified: Optional[StrictInt] = Field(default=None, description="Time modified.")
    __properties: ClassVar[List[str]] = ["filename", "filepath", "filesize", "fileurl", "icon", "isexternalfile", "mimetype", "repositorytype", "timemodified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreEnrolGetUsersCoursesResponseInnerOverviewfilesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if filename (nullable) is None
        # and model_fields_set contains the field
        if self.filename is None and "filename" in self.model_fields_set:
            _dict['filename'] = None

        # set to None if filepath (nullable) is None
        # and model_fields_set contains the field
        if self.filepath is None and "filepath" in self.model_fields_set:
            _dict['filepath'] = None

        # set to None if filesize (nullable) is None
        # and model_fields_set contains the field
        if self.filesize is None and "filesize" in self.model_fields_set:
            _dict['filesize'] = None

        # set to None if fileurl (nullable) is None
        # and model_fields_set contains the field
        if self.fileurl is None and "fileurl" in self.model_fields_set:
            _dict['fileurl'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if isexternalfile (nullable) is None
        # and model_fields_set contains the field
        if self.isexternalfile is None and "isexternalfile" in self.model_fields_set:
            _dict['isexternalfile'] = None

        # set to None if mimetype (nullable) is None
        # and model_fields_set contains the field
        if self.mimetype is None and "mimetype" in self.model_fields_set:
            _dict['mimetype'] = None

        # set to None if repositorytype (nullable) is None
        # and model_fields_set contains the field
        if self.repositorytype is None and "repositorytype" in self.model_fields_set:
            _dict['repositorytype'] = None

        # set to None if timemodified (nullable) is None
        # and model_fields_set contains the field
        if self.timemodified is None and "timemodified" in self.model_fields_set:
            _dict['timemodified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreEnrolGetUsersCoursesResponseInnerOverviewfilesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filename": obj.get("filename"),
            "filepath": obj.get("filepath"),
            "filesize": obj.get("filesize"),
            "fileurl": obj.get("fileurl"),
            "icon": obj.get("icon"),
            "isexternalfile": obj.get("isexternalfile"),
            "mimetype": obj.get("mimetype"),
            "repositorytype": obj.get("repositorytype"),
            "timemodified": obj.get("timemodified")
        })
        return _obj


