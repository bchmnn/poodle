# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API.

    The version of the OpenAPI document: 4.5 (Build: 20241007)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreCourseGetContentsResponseInnerModulesInnerContentsinfo(BaseModel):
    """
    Contents summary information.
    """ # noqa: E501
    filescount: Optional[StrictInt] = Field(description="Total number of files.")
    filessize: Optional[StrictInt] = Field(description="Total files size.")
    lastmodified: Optional[StrictInt] = Field(description="Last time files were modified.")
    mimetypes: List[Optional[StrictStr]] = Field(description="Files mime types.")
    repositorytype: Optional[StrictStr] = Field(default=None, description="The repository type for                                                 the main file.")
    __properties: ClassVar[List[str]] = ["filescount", "filessize", "lastmodified", "mimetypes", "repositorytype"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCourseGetContentsResponseInnerModulesInnerContentsinfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if filescount (nullable) is None
        # and model_fields_set contains the field
        if self.filescount is None and "filescount" in self.model_fields_set:
            _dict['filescount'] = None

        # set to None if filessize (nullable) is None
        # and model_fields_set contains the field
        if self.filessize is None and "filessize" in self.model_fields_set:
            _dict['filessize'] = None

        # set to None if lastmodified (nullable) is None
        # and model_fields_set contains the field
        if self.lastmodified is None and "lastmodified" in self.model_fields_set:
            _dict['lastmodified'] = None

        # set to None if repositorytype (nullable) is None
        # and model_fields_set contains the field
        if self.repositorytype is None and "repositorytype" in self.model_fields_set:
            _dict['repositorytype'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCourseGetContentsResponseInnerModulesInnerContentsinfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filescount": obj.get("filescount"),
            "filessize": obj.get("filessize"),
            "lastmodified": obj.get("lastmodified"),
            "mimetypes": obj.get("mimetypes"),
            "repositorytype": obj.get("repositorytype")
        })
        return _obj


